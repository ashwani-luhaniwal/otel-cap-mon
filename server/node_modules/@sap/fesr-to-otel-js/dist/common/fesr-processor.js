"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processFesr = void 0;
const api_1 = __importStar(require("@opentelemetry/api"));
const passport_1 = require("../lib/passport");
const logger_1 = require("./logger");
const ATT_ROOT_CTX_ID = "rootContextId";
const ATT_TRANS_ID = "transactionId";
const ATT_PP_ACTION = "pPaction";
const ATT_ACTION = "action";
const ATT_BROWSER_VERSION = "browserVersion";
const ATT_CLIENT_DEVICE = "clientDevice";
const ATT_EXTERNAL_TIME = "externalTime";
const ATT_NETWORK_TIME = "networkTime";
const ATT_NUMBER_OF_ROUND_TRIPS = "numberOfRoundTrips";
const ATT_OS_VERSION = "osVersion";
const ATT_RECEIVED_BYTES = "receivedBytes";
const ATT_PASSPORT = "passport";
const ATT_REQUEST = "request";
const ATT_REQUEST_TYPE = "requestType";
const ATT_SENT_BYTES = "sentBytes";
const ATT_SERVER_ROUND_TRIP_TIME = "serverRoundTripTime";
const FESR_LENGTH = 30;
const UNDETERMINED = "undetermined";
const SAP_PERF_FESREC_OPT = "SAP-Perf-FESRec-opt";
const DIGIT_PATTERN = /\d{2,}/g;
const defaultTracer = api_1.default.trace.getTracer('sap-fesr-handler');
function processFesr(fesr, context, tracer) {
    const fesrAtts = fesr.split(fesr.includes("%2C") ? "%2C" : ",");
    if (fesrAtts.length < FESR_LENGTH) {
        logger_1.logger.debug(`Expected ${FESR_LENGTH} attributes but found only ${fesrAtts.length}, will ignore fesr`);
        return undefined;
    }
    const appNameLong = fesrAtts[29];
    if (UNDETERMINED === appNameLong) {
        logger_1.logger.debug(`${UNDETERMINED} app name, will ignore fesr`);
        return undefined;
    }
    return measure(fesrAtts, context, tracer !== null && tracer !== void 0 ? tracer : defaultTracer);
}
exports.processFesr = processFesr;
function measure(fesrAtts, context, tracer) {
    const rootContextId = fesrAtts[0];
    const transactionId = fesrAtts[1];
    const clientRoundTripTime = parseInt(fesrAtts[3]);
    const endToEndTime = parseInt(fesrAtts[4]);
    const completedNetworkRoundTrips = parseInt(fesrAtts[5]);
    const passportAction = fesrAtts[6];
    const networkTime = parseInt(fesrAtts[7]);
    const clientOs = fesrAtts[9];
    // e.g. SAP_UI5SAP-Perf-FESRec-opt.crun.shared.app.exm
    const optIdx = fesrAtts[10].indexOf(SAP_PERF_FESREC_OPT);
    const clientType = fesrAtts[10].substring(0, optIdx);
    const appName = fesrAtts[10].substring(optIdx + SAP_PERF_FESREC_OPT.length);
    let stepName = passportAction;
    const clientModel = fesrAtts[13];
    const clientDataSent = parseInt(fesrAtts[14]);
    const clientDataRcvd = parseInt(fesrAtts[15]);
    const netTime = parseInt(fesrAtts[18]);
    const clientDevice = parseInt(fesrAtts[26]);
    const appNameLong = fesrAtts[29];
    const request = appNameLong != null ? appNameLong : appName;
    stepName = stepName.replace(DIGIT_PATTERN, "");
    stepName = removeCloneCounter(stepName);
    const span = tracer.startSpan("fesr", {
        kind: api_1.SpanKind.CLIENT
    }, context);
    const start = Date.now();
    span.setAttribute(ATT_ROOT_CTX_ID, rootContextId);
    span.setAttribute(ATT_TRANS_ID, transactionId);
    span.setAttribute(ATT_PP_ACTION, passportAction);
    span.setAttribute(ATT_ACTION, stepName);
    span.setAttribute(ATT_BROWSER_VERSION, clientModel);
    span.setAttribute(ATT_CLIENT_DEVICE, Math.max(clientDevice, 0));
    span.setAttribute(ATT_NUMBER_OF_ROUND_TRIPS, completedNetworkRoundTrips);
    span.setAttribute(ATT_OS_VERSION, clientOs);
    span.setAttribute(ATT_REQUEST, request);
    span.setAttribute(ATT_REQUEST_TYPE, clientType);
    if (clientRoundTripTime > -1) {
        span.setAttribute(ATT_SERVER_ROUND_TRIP_TIME, clientRoundTripTime);
    }
    if (networkTime > -1) {
        span.setAttribute(ATT_NETWORK_TIME, networkTime);
    }
    if (netTime > -1 && endToEndTime > -1) {
        span.setAttribute(ATT_EXTERNAL_TIME, Math.abs(endToEndTime - netTime));
    }
    if (clientDataSent > -1) {
        span.setAttribute(ATT_SENT_BYTES, clientDataSent);
    }
    if (clientDataRcvd > -1) {
        span.setAttribute(ATT_RECEIVED_BYTES, clientDataRcvd);
    }
    const hex = createPassport(transactionId, rootContextId, passportAction);
    span.setAttribute(ATT_PASSPORT, hex);
    span.end(start + endToEndTime);
    return span;
}
function removeCloneCounter(actionName) {
    return actionName.replace(/_clone\d+[_-]/, "_clone_").replace(/_\d{1,5}(?!.*_\d)/, "");
}
function createPassport(transId, rootContextId, action) {
    const passport = new passport_1.DsrPassport();
    const receiver = "fesr-receiver";
    passport.createV3Passport(passport_1.TraceFlags.LOW, // (NONE|LOW|MEDIUM|HIGH) Use LOW for just correlation
    receiver, // Passport Creator ComponentName
    0, // Service: 0 for "undefined"
    "<dummy>", // 
    action, //
    11, // ActionType: 11 denotes HTTP Request
    receiver, // Previous Component PreviousComponentName
    transId.length !== 32 ? passport_1.Tools.createGUID() : transId, // TransactionID 
    "   ", // In case of ABAP system Source Client, else "   "
    passport_1.ComponentTypes.TRACELIB, // Corresponding Component Type (see ComponentTypes)
    rootContextId, // RootContextId
    passport_1.Tools.createGUID(), // ConnectionId  
    1); // ConnectionCounter
    return passport.getPassportAsString();
}
