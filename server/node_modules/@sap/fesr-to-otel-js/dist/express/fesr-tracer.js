"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasRootContextId = exports.registerFesrEndpoint = void 0;
const util_1 = require("../common/util");
const fesr_processor_1 = require("../common/fesr-processor");
const api_1 = __importDefault(require("@opentelemetry/api"));
const ExpressGetter_1 = require("./ExpressGetter");
const body_parser_1 = __importDefault(require("body-parser"));
const express_validator_1 = require("express-validator");
const FESR_ROUTE = "/fesr";
const FESR_REC = "SAP-Perf-FESRec";
const FESR_ONLY = "sap-fesr-only";
const EXPRESS_GETTER = new ExpressGetter_1.ExpressGetter();
function registerFesrEndpoint(app) {
    app.post(FESR_ROUTE, body_parser_1.default.urlencoded({ extended: false }), (0, express_validator_1.body)(FESR_ONLY).equals("1"), (0, express_validator_1.body)(FESR_REC).custom(hasRootContextId), (req, res) => __awaiter(this, void 0, void 0, function* () {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            return res
                .header("Strict-Transport-Security", "max-age=31536000")
                .header("Content-Security-Policy", "script-src 'self' ")
                .status(400)
                .json({ errors: errors.array() });
        }
        const context = api_1.default.propagation.extract(api_1.default.context.active(), req, EXPRESS_GETTER);
        const map = (0, util_1.parseFesrBody)(req.body);
        const fesrs = map.get(FESR_REC);
        if (!fesrs) {
            return res.status(201).end();
        }
        fesrs.forEach(f => (0, fesr_processor_1.processFesr)(f, context));
        return res.end();
    }));
}
exports.registerFesrEndpoint = registerFesrEndpoint;
function hasRootContextId(fesrValue) {
    const err = new Error("not a valid fesr");
    const validateMultiple = (val) => {
        val.forEach(validateSingle);
        return true;
    };
    const validateSingle = (val) => {
        const arr = val.split(",");
        if (arr.length < 2 || arr.length < 30) {
            throw err;
        }
        const root = arr[0];
        if (root.length !== 32) {
            throw err;
        }
        return true;
    };
    if (!fesrValue) {
        throw err;
    }
    if (typeof fesrValue === "string") {
        return validateSingle(fesrValue);
    }
    else if (typeof fesrValue === "object") {
        return validateMultiple(fesrValue);
    }
    throw err;
}
exports.hasRootContextId = hasRootContextId;
