import { VarPart } from "./model/DsrPassportElement";
import { TraceFlags } from "./model/TraceFlags";
import { ComponentTypes } from "./model/ComponentTypes";
export declare class DsrPassport {
    private readonly possiblePassportElements;
    private passportObjects;
    private readonly posOfFirstVarPartInPP;
    constructor();
    getPassportElements(): object[];
    parsePassport(dsrPassportAsString: string): void;
    createV3Passport(traceFlag: TraceFlags, componentId: string, service: number, user: string, action: string, actionType: number, prevComponentId: string, transId: string, clientNumber: string, component: ComponentTypes, rootContextId: string, connectionId: string, connectionCounter: number): void;
    getPassportAsString(): string;
    getComponentType(): string;
    getClient(): string;
    getPreviousComponentId(): string;
    getActionType(): number;
    getAction(): string;
    getUser(): string;
    getService(): number;
    getComponentId(): string;
    getLength(): string;
    getVersion(): number;
    setTraceFlag(traceLvl: TraceFlags): void;
    getTraceFlag(): TraceFlags;
    setTransactionId(transactionIdAsHex: string): void;
    getTransactionId(): string;
    getRootContextId(): string;
    setPreviousComponent(component: string): void;
    setConnectionId(connectionId: string): void;
    getConnectionId(): string;
    setConnectionCount(connectionCount: number): void;
    getConnectionCount(): number;
    /**
     * bundle all getter in an Object
     **/
    getAllAsBundle(): object;
    static createGUID(): string;
    addVarPart(varPart: VarPart): void;
    removeVarPart(index: number): void;
    getVarPartList(): VarPart[];
    getVarPartCount(): number;
    getVarPart(index: number): VarPart | undefined;
    private removeEmptySpaces;
    private createVarPartList;
    private searchPassportElement;
    private readPassport;
    private createPossibleElements;
    private generatePassport;
}
