"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DsrPassport = void 0;
/* *
 *
 * Structure of the new EXTERNAL net passport v3
 * Bytes total: min 248
 * Position: Length:  Field:
 * -----------------------------------------
 * 0         4        eyecatcher #1
 * 4         1        version          (passport version)
 * 5         2        len              (var part length)
 * 7         2        trace flag
 * 9         32       component id        (Component)
 * 41        2        service
 * 43        32       user
 * 75        40       action
 * 115       2        action type
 * 117       32       previous component id
 * 149       32       transaction id or guid
 * 181       3        client number (ABAP)
 * 184       2        component type (Java, ABAP, TREX)
 * 186       16       root context ID
 * 202       16       connection ID
 * 218       4        connection counter
 * 224       2        var part counter
 * 226       2        var part offset
 * 228       4        eyecatcher #2
 * 230       x        varpart optional part - depends of var part count and offset
 * x         4        eyecatcher #3
 * -----------------------------------------
 * */
const Tools_1 = require("./util/Tools");
const DsrPassportElement_1 = require("./model/DsrPassportElement");
const TraceFlags_1 = require("./model/TraceFlags");
const ComponentTypes_1 = require("./model/ComponentTypes");
class DsrPassport {
    constructor() {
        //special field, here begins the varpart section with flexable lengths
        this.posOfFirstVarPartInPP = 230;
        this.possiblePassportElements = this.createPossibleElements();
        this.passportObjects = [];
    }
    getPassportElements() {
        return this.passportObjects;
    }
    parsePassport(dsrPassportAsString) {
        const version = Object.create(this.possiblePassportElements[DsrPassportElement_1.PassportIdentifier.VERSION]);
        version.setPosition(4);
        version.setLength(1);
        version.setValueFromDsrPassport(dsrPassportAsString);
        const template = [
            { key: DsrPassportElement_1.PassportIdentifier.EYECATCHER, pos: 0, len: 4 },
            { key: DsrPassportElement_1.PassportIdentifier.VERSION, pos: 4, len: 1 },
            { key: DsrPassportElement_1.PassportIdentifier.LENGTH, pos: 5, len: 2 },
            { key: DsrPassportElement_1.PassportIdentifier.TRACELEVEL, pos: 7, len: 2 },
            { key: DsrPassportElement_1.PassportIdentifier.COMPONENTID, pos: 9, len: 32 },
            { key: DsrPassportElement_1.PassportIdentifier.SERVICE, pos: 41, len: 2 },
            { key: DsrPassportElement_1.PassportIdentifier.USER, pos: 43, len: 32 },
            { key: DsrPassportElement_1.PassportIdentifier.ACTION, pos: 75, len: 40 },
            { key: DsrPassportElement_1.PassportIdentifier.ACTIONTYPE, pos: 115, len: 2 },
            { key: DsrPassportElement_1.PassportIdentifier.PREVCOMPONENTID, pos: 117, len: 32 },
            { key: DsrPassportElement_1.PassportIdentifier.TRANSACTIONID, pos: 149, len: 32 }
        ];
        if (version.getValueAsString() === "02") {
            template.push({ key: DsrPassportElement_1.PassportIdentifier.EYECATCHER, pos: 181, len: 4 });
        }
        else if (version.getValueAsString() === "03") {
            template.push({ key: DsrPassportElement_1.PassportIdentifier.CLIENT, pos: 181, len: 3 });
            template.push({ key: DsrPassportElement_1.PassportIdentifier.COMPONENTTYPE, pos: 184, len: 2 });
            template.push({ key: DsrPassportElement_1.PassportIdentifier.ROOTCONTEXTID, pos: 186, len: 16 });
            template.push({ key: DsrPassportElement_1.PassportIdentifier.CONNECTIONID, pos: 202, len: 16 });
            template.push({ key: DsrPassportElement_1.PassportIdentifier.CONNECTIONCNT, pos: 218, len: 4 });
            template.push({ key: DsrPassportElement_1.PassportIdentifier.VARPARTCOUNT, pos: 222, len: 2 });
            template.push({ key: DsrPassportElement_1.PassportIdentifier.VARPARTOFFSET, pos: 224, len: 2 });
            template.push({ key: DsrPassportElement_1.PassportIdentifier.EYECATCHER, pos: 226, len: 4 });
            template.push({ key: DsrPassportElement_1.PassportIdentifier.VARPARTLIST, pos: 230, len: -1 });
        }
        else {
            throw new Error("Could not recognize passport version, currently v3 supported");
        }
        this.passportObjects = this.readPassport(template, dsrPassportAsString);
    }
    createV3Passport(traceFlag, componentId, service, user, action, actionType, prevComponentId, transId, clientNumber, component, rootContextId, connectionId, connectionCounter) {
        /**
         * currently not supported
         * so we set count and offset to zero
         * */
        const varpartCount = "0000";
        const varpartOffset = "0226";
        const eyeCatcherValue = ["2A", "54", "48", "2A"];
        this.passportObjects = []; //cleanup 
        this.passportObjects = this.generatePassport([
            { key: DsrPassportElement_1.PassportIdentifier.EYECATCHER, value: eyeCatcherValue, pos: 0, len: 4 },
            { key: DsrPassportElement_1.PassportIdentifier.VERSION, value: 3, pos: 4, len: 1 },
            { key: DsrPassportElement_1.PassportIdentifier.LENGTH, pos: 5, len: 2 },
            { key: DsrPassportElement_1.PassportIdentifier.TRACELEVEL, value: traceFlag, pos: 7, len: 2 },
            { key: DsrPassportElement_1.PassportIdentifier.COMPONENTID, value: componentId, pos: 9, len: 32 },
            { key: DsrPassportElement_1.PassportIdentifier.SERVICE, value: service, pos: 41, len: 2 },
            { key: DsrPassportElement_1.PassportIdentifier.USER, value: user, pos: 43, len: 32 },
            { key: DsrPassportElement_1.PassportIdentifier.ACTION, value: action, pos: 75, len: 40 },
            { key: DsrPassportElement_1.PassportIdentifier.ACTIONTYPE, value: actionType, pos: 115, len: 2 },
            { key: DsrPassportElement_1.PassportIdentifier.PREVCOMPONENTID, value: prevComponentId, pos: 117, len: 32 },
            { key: DsrPassportElement_1.PassportIdentifier.TRANSACTIONID, value: transId, pos: 149, len: 32 },
            { key: DsrPassportElement_1.PassportIdentifier.CLIENT, value: clientNumber, pos: 181, len: 3 },
            { key: DsrPassportElement_1.PassportIdentifier.COMPONENTTYPE, value: component, pos: 184, len: 2 },
            { key: DsrPassportElement_1.PassportIdentifier.ROOTCONTEXTID, value: rootContextId, pos: 186, len: 16 },
            { key: DsrPassportElement_1.PassportIdentifier.CONNECTIONID, value: connectionId, pos: 202, len: 16 },
            { key: DsrPassportElement_1.PassportIdentifier.CONNECTIONCNT, value: connectionCounter, pos: 218, len: 4 },
            { key: DsrPassportElement_1.PassportIdentifier.VARPARTCOUNT, value: varpartCount, pos: 222, len: 2 },
            { key: DsrPassportElement_1.PassportIdentifier.VARPARTOFFSET, value: varpartOffset, pos: 224, len: 2 },
            { key: DsrPassportElement_1.PassportIdentifier.EYECATCHER, value: eyeCatcherValue, pos: 226, len: 4 },
        ]);
    }
    getPassportAsString() {
        let stringAsPassport = "";
        const keys = Object.keys(this.passportObjects);
        for (const key of keys) {
            stringAsPassport += this.passportObjects[key].getValueAsString();
        }
        return stringAsPassport.toUpperCase();
    }
    getComponentType() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.COMPONENTTYPE);
        return ComponentTypes_1.ComponentReverseTypes[ppElement.getValueAsString()];
    }
    getClient() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.CLIENT);
        return this.removeEmptySpaces(Tools_1.Tools.transformHexToString(ppElement.getValueAsString()));
    }
    getPreviousComponentId() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.PREVCOMPONENTID);
        return this.removeEmptySpaces(Tools_1.Tools.transformHexToString(ppElement.getValueAsString()));
    }
    getActionType() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.ACTIONTYPE);
        return Tools_1.Tools.transformHexToNumber(ppElement.getValueAsString());
    }
    getAction() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.ACTION);
        return this.removeEmptySpaces(Tools_1.Tools.transformHexToString(ppElement.getValueAsString()));
    }
    getUser() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.USER);
        return this.removeEmptySpaces(Tools_1.Tools.transformHexToString(ppElement.getValueAsString()));
    }
    getService() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.SERVICE);
        return Tools_1.Tools.transformHexToNumber(ppElement.getValueAsString());
    }
    getComponentId() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.COMPONENTID);
        return this.removeEmptySpaces(Tools_1.Tools.transformHexToString(ppElement.getValueAsString()));
    }
    getLength() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.LENGTH);
        return (`${Tools_1.Tools.transformHexToNumber(ppElement.getValueAsString())}`);
    }
    getVersion() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.VERSION);
        return Tools_1.Tools.transformHexToNumber(ppElement.getValueAsString());
    }
    setTraceFlag(traceLvl) {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.TRACELEVEL);
        ppElement.setValue(traceLvl);
    }
    getTraceFlag() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.TRACELEVEL);
        const flagAsHex = ppElement.getValue();
        if (JSON.stringify(flagAsHex) === JSON.stringify(["00", "00"])) {
            return TraceFlags_1.TraceFlags.LOW;
        }
        if (JSON.stringify(flagAsHex) === JSON.stringify(["89", "0A"])) {
            return TraceFlags_1.TraceFlags.MEDIUM;
        }
        if (JSON.stringify(flagAsHex) === JSON.stringify(["9F", "9D"])) {
            return TraceFlags_1.TraceFlags.HIGH;
        }
        return TraceFlags_1.TraceFlags.NONE;
    }
    setTransactionId(transactionIdAsHex) {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.TRANSACTIONID);
        ppElement.setValue(transactionIdAsHex);
    }
    getTransactionId() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.TRANSACTIONID);
        return Tools_1.Tools.transformHexToString(ppElement.getValueAsString());
    }
    getRootContextId() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.ROOTCONTEXTID);
        return ppElement.getValueAsString();
    }
    setPreviousComponent(component) {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.PREVCOMPONENTID);
        ppElement.setValue(component);
    }
    setConnectionId(connectionId) {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.CONNECTIONID);
        ppElement.setValue(connectionId);
    }
    getConnectionId() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.CONNECTIONID);
        return ppElement.getValueAsString();
    }
    setConnectionCount(connectionCount) {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.CONNECTIONCNT);
        ppElement.setValue(connectionCount);
    }
    getConnectionCount() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.CONNECTIONCNT);
        return Tools_1.Tools.transformHexToNumber(ppElement.getValueAsString());
    }
    /**
     * bundle all getter in an Object
     **/
    getAllAsBundle() {
        return {
            "CONNECTIONID": this.getConnectionId(),
            "CONNECTIONCOUNT": this.getConnectionCount(),
            "TRANSACTIONID": this.getTransactionId(),
            "ROOTCONTEXTID": this.getRootContextId(),
        };
    }
    static createGUID() {
        return Tools_1.Tools.createGUID();
    }
    addVarPart(varPart) {
        let ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.VARPARTLIST);
        if (!ppElement) {
            this.createVarPartList();
            ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.VARPARTLIST);
        }
        const varPartList = ppElement;
        varPartList.addVarPart(varPart);
        const varPartCount = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.VARPARTCOUNT);
        varPartCount.setValue(Tools_1.Tools.changeNumToPassportValue(varPartList.getVarParts(null).length, varPartCount.getLength()).join(''));
    }
    removeVarPart(index) {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.VARPARTLIST);
        if (ppElement) {
            const varPartList = ppElement;
            varPartList.removeVarPart(index);
        }
    }
    getVarPartList() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.VARPARTLIST);
        if (ppElement) {
            const varPartList = ppElement;
            return varPartList.getVarParts(null);
        }
        return [];
    }
    getVarPartCount() {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.VARPARTLIST);
        if (ppElement) {
            const varPartList = ppElement;
            return varPartList.getVarParts(null).length;
        }
        return 0;
    }
    getVarPart(index) {
        const ppElement = this.searchPassportElement(DsrPassportElement_1.PassportIdentifier.VARPARTLIST);
        if (ppElement) {
            const varPartList = ppElement;
            return varPartList.getVarParts(index);
        }
        return undefined;
    }
    removeEmptySpaces(str) {
        const re = / /gi;
        return str.replace(re, "");
    }
    createVarPartList() {
        const varPartList = new DsrPassportElement_1.VarPartList();
        varPartList.setPosition(230);
        varPartList.setId(DsrPassportElement_1.PassportIdentifier.VARPARTLIST);
        this.passportObjects.push(varPartList);
    }
    searchPassportElement(elementId) {
        for (const element of this.passportObjects) {
            const currElement = element;
            if (currElement.getId() === elementId) {
                return currElement;
            }
        }
        return undefined;
    }
    readPassport(template, dsrPassportAsString) {
        const result = [];
        for (const element of template) {
            // @ts-ignore 
            const obj = Object.create(this.possiblePassportElements[element['key']]);
            // @ts-ignore 
            obj.setId(element['key']);
            // @ts-ignore 
            obj.setLength(element['len']);
            // @ts-ignore 
            obj.setPosition(element['pos']);
            obj.setValueFromDsrPassport(dsrPassportAsString);
            if (obj.getValue()) {
                if (obj.getValue().length > 0) {
                    result.push(obj);
                }
            }
        }
        return result;
    }
    createPossibleElements() {
        const possibleElements = {};
        possibleElements[DsrPassportElement_1.PassportIdentifier.EYECATCHER] = DsrPassportElement_1.EyeCatcher.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.VERSION] = DsrPassportElement_1.PassportNumber.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.LENGTH] = DsrPassportElement_1.PassportNumber.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.TRACELEVEL] = DsrPassportElement_1.TraceLevel.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.COMPONENTID] = DsrPassportElement_1.PassportString.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.SERVICE] = DsrPassportElement_1.PassportNumber.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.USER] = DsrPassportElement_1.PassportString.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.ACTION] = DsrPassportElement_1.PassportString.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.ACTIONTYPE] = DsrPassportElement_1.PassportNumber.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.PREVCOMPONENTID] = DsrPassportElement_1.PassportString.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.TRANSACTIONID] = DsrPassportElement_1.TransactionId.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.GUID] = DsrPassportElement_1.Guid.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.CLIENT] = DsrPassportElement_1.PassportString.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.COMPONENTTYPE] = DsrPassportElement_1.ComponentType.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.ROOTCONTEXTID] = DsrPassportElement_1.Guid.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.CONNECTIONID] = DsrPassportElement_1.Guid.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.CONNECTIONCNT] = DsrPassportElement_1.PassportNumber.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.VARPARTCOUNT] = DsrPassportElement_1.PassportNumber.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.VARPARTOFFSET] = DsrPassportElement_1.PassportNumber.prototype;
        possibleElements[DsrPassportElement_1.PassportIdentifier.VARPARTLIST] = DsrPassportElement_1.VarPartList.prototype;
        return possibleElements;
    }
    generatePassport(elements) {
        const result = [];
        for (const element of elements) {
            // @ts-ignore 
            let value = element['value'];
            // @ts-ignore 
            const obj = Object.create(this.possiblePassportElements[element['key']]);
            // @ts-ignore 
            obj.setId(element['key']);
            // @ts-ignore 
            obj.setPosition(element['pos']);
            // @ts-ignore 
            obj.setLength(element['len']);
            // @ts-ignore 
            if (element['key'] === DsrPassportElement_1.PassportIdentifier.LENGTH) {
                //we assume that the last element in array also the last element in passport is  
                //therefore we get the length of the passport 
                const lastElement = elements[elements.length - 1];
                // @ts-ignore 
                value = lastElement['pos'] + lastElement['len'];
            }
            obj.setValue(value);
            result.push(obj);
        }
        return result;
    }
}
exports.DsrPassport = DsrPassport;
