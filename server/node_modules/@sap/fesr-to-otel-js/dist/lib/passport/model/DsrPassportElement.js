"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PassportIdentifier = exports.VarPartItem = exports.VarPartHeader = exports.VarPart = exports.VarPartList = exports.EyeCatcher = exports.ComponentType = exports.PassportString = exports.PassportNumber = exports.TransactionId = exports.Guid = exports.TraceLevel = exports.DsrPassportElement = void 0;
const Tools_1 = require("../util/Tools");
const TraceFlags_1 = require("./TraceFlags");
const VarPartType_1 = require("./VarPartType");
const VarPartItemType_1 = require("./VarPartItemType");
const VarPartVersion_1 = require("./VarPartVersion");
/**
 * parent object for all elements in passport
 * encapsulate common functionality
 *
 * all values are saved as hex
 * */
class DsrPassportElement {
    constructor() {
        this.position = 0;
        this.length = 0;
    }
    setPosition(position) {
        this.position = position;
    }
    getPosition() {
        return this.position;
    }
    setLength(length) {
        this.length = length;
    }
    getLength() {
        return this.length;
    }
    getValue() {
        return this.value;
    }
    getValueAsString() {
        return this.value.join('');
    }
    getId() {
        return this.id;
    }
    setId(id) {
        this.id = id;
    }
    getElement(offset, length, varPartAsString) {
        const offsetCharSize = offset * 2;
        const lengthCharSize = length * 2;
        return varPartAsString.substring(offsetCharSize, offsetCharSize + lengthCharSize);
    }
}
exports.DsrPassportElement = DsrPassportElement;
/**
 * none     - [0x00, 0x00]
 * low      - [0x00, 0x00]
 * medium   - [0x89, 0x0A]
 * high     - [0x9F, 0x9D]
 * */
class TraceLevel extends DsrPassportElement {
    setValue(value) {
        if (value === TraceFlags_1.TraceFlags.LOW) {
            this.value = ["00", "00"];
            return;
        }
        if (value === TraceFlags_1.TraceFlags.MEDIUM) {
            this.value = ["89", "0A"];
            return;
        }
        if (value === TraceFlags_1.TraceFlags.HIGH) {
            this.value = ["9F", "9D"];
        }
    }
    setValueFromDsrPassport(dsrPassport) {
        const subString = dsrPassport.substring(this.position * 2, this.position * 2 + this.length * 2);
        this.value = Tools_1.Tools.hexStringToHexArray(subString);
    }
}
exports.TraceLevel = TraceLevel;
/**
 * used for
 *    - GUID
 *    - transaction id
 *    - root context id
 *    - connection id
 * */
class Guid extends DsrPassportElement {
    setValue(value) {
        if (value.length / 2 !== this.length) {
            throw new Error(`Length of the Guid is not correct [ ${value.length} != ${this.length} ] for ${this.getId()}`);
        }
        this.value = Tools_1.Tools.hexStringToHexArray(value);
    }
    setValueFromDsrPassport(dsrPassport) {
        if (dsrPassport) {
            this.value = Tools_1.Tools.hexStringToHexArray(dsrPassport.substring(this.position * 2, this.position * 2 + this.length * 2));
            if (this.value.length !== this.length) {
                throw new Error(`Length of the Guid is not correct [ ${this.value.length} != ${this.length} ] for ${this.getId()}`);
            }
            //this.value = Tools.hexStringToHexArray(this.value)
        }
        else {
            throw new Error(`Guid is empty or null for ${this.getId()}`);
        }
    }
    getValue() {
        if (!this.value) {
            this.value = Tools_1.Tools.hexStringToHexArray(Tools_1.Tools.createGUID());
        }
        return this.value;
    }
}
exports.Guid = Guid;
/**
 * we expected a guid and transfom ever char to hex
 * therefore we transform transid with length 16 to
 * transid with length 32
 * */
class TransactionId extends DsrPassportElement {
    setValue(value) {
        if (value) {
            let result = Tools_1.Tools.transformStringToHex(value);
            if ((result.length * 2) < this.length) {
                result = Tools_1.Tools.addSpaces(result, this.length - result.length);
            }
            if (result.length > this.length) {
                throw new Error(`Value is to long for ${this.getId()}`);
            }
            this.value = result;
        }
        else {
            throw new Error("Transaction id is empty or null");
        }
    }
    setValueFromDsrPassport(dsrPassport) {
        const subString = dsrPassport.substring(this.position * 2, this.position * 2 + this.length * 2);
        this.value = Tools_1.Tools.hexStringToHexArray(subString);
    }
    getValue() {
        return this.value;
    }
}
exports.TransactionId = TransactionId;
/**
 * used for
 *   - version
 *   - len
 *   - client number
 *   - connection counter
 *   - var part counter
 *
 * */
class PassportNumber extends DsrPassportElement {
    setValue(value) {
        this.value = Tools_1.Tools.changeNumToPassportValue(value, this.length);
        if (this.value.length !== this.length) {
            throw new Error(`Length of the value is not correct for ${this.getId()}`);
        }
    }
    setValueFromDsrPassport(dsrPassport) {
        this.value = Tools_1.Tools.hexStringToHexArray(dsrPassport.substring(this.position * 2, this.position * 2 + this.length * 2));
    }
}
exports.PassportNumber = PassportNumber;
/**
 * used for
 *   - action
 *   - client
 *   - version
 * */
class PassportString extends DsrPassportElement {
    setValue(value) {
        if (value) {
            let result = Tools_1.Tools.transformStringToHex(value);
            if (result.length < this.length) {
                result = Tools_1.Tools.addSpaces(result, this.length - result.length);
            }
            if (result.length > this.length) {
                result.length = this.length;
            }
            this.value = result;
        }
        else {
            throw new Error(`Value is empty or null for ${this.getId()}`);
        }
    }
    setValueFromDsrPassport(dsrPassport) {
        const subString = dsrPassport.substring(this.position * 2, this.position * 2 + this.length * 2);
        this.value = Tools_1.Tools.hexStringToHexArray(subString);
    }
}
exports.PassportString = PassportString;
/**
 * used for
 *   - component type
 * */
class ComponentType extends DsrPassportElement {
    setValue(value) {
        if (value) {
            this.value = Tools_1.Tools.hexStringToHexArray(value);
        }
        else {
            throw new Error("ComponentType is empty or null ");
        }
    }
    setValueFromDsrPassport(dsrPassport) {
        const subString = dsrPassport.substring(this.position * 2, this.position * 2 + this.length * 2);
        this.value = Tools_1.Tools.hexStringToHexArray(subString);
    }
}
exports.ComponentType = ComponentType;
class EyeCatcher extends DsrPassportElement {
    setValue(value) {
        if (value) {
            this.value = value;
        }
        else {
            throw new Error(" Eycatcher is empty or null");
        }
    }
    setValueFromDsrPassport(dsrPassport) {
        const subString = dsrPassport.substring(this.position * 2, this.position * 2 + this.length * 2);
        this.value = Tools_1.Tools.hexStringToHexArray(subString);
    }
}
exports.EyeCatcher = EyeCatcher;
class VarPartList extends DsrPassportElement {
    constructor() {
        super();
        this.varPartList = [];
    }
    setValue(value) {
        this.value = [];
    }
    addVarPart(varPart) {
        if (this.varPartList.length !== 0) {
            this.varPartList[this.varPartList.length - 1].setLastVarPart(false);
        }
        varPart.setLastVarPart(true);
        this.varPartList.push(varPart);
    }
    removeVarPart(index) {
        if (this.varPartList.length === 0) {
            return;
        }
        if (index > this.varPartList.length - 1) {
            throw new Error('Can not remove VarPart. Index is invalid');
        }
        this.varPartList.splice(index, 1);
        const varPartLength = this.varPartList.length;
        if (index === varPartLength && varPartLength > 0) {
            this.varPartList[varPartLength - 1].setLastVarPart(true);
        }
    }
    getVarParts(index) {
        if (!index && index !== 0) {
            return this.varPartList;
        }
        else {
            if (index < this.varPartList.length) {
                return this.varPartList[index];
            }
            else {
                throw new Error('Can not fetch VarPart, Index not valid');
            }
        }
    }
    setValueFromDsrPassport(dsrPassport) {
        let currentPosition = this.position;
        if (currentPosition >= (dsrPassport.length / 2)) {
            return;
        }
        if (!this.varPartList) {
            this.varPartList = [];
        }
        while (currentPosition !== -1) {
            const varPart = Object.create(VarPart.prototype);
            varPart.setPosition(currentPosition);
            varPart.setValueFromDsrPassport(dsrPassport);
            this.varPartList.push(varPart);
            if (currentPosition > 0 && this.varPartList.length > 0) {
                currentPosition = this.calculatingRestString(this.varPartList[this.varPartList.length - 1], dsrPassport);
            }
            else {
                currentPosition = this.position;
            }
            if (!this.value) {
                this.value = varPart.getValue();
            }
            else {
                //concat doesn't work, seems to be a bug
                for (const element of varPart.getValue()) {
                    this.value.push(element);
                }
            }
        }
    }
    /**
     * check if there is another passport available
     * */
    calculatingRestString(varPart, dsrPassport) {
        const pos = varPart.getPosition();
        const len = varPart.getLength();
        const wholeVarParts = dsrPassport.substring(pos * 2, dsrPassport.length - 1);
        if ((wholeVarParts.length - len * 2) > 0) {
            return this.position + len;
        }
        else {
            return -1;
        }
    }
}
exports.VarPartList = VarPartList;
class VarPart extends DsrPassportElement {
    constructor(varPartVersion, varPartType) {
        super();
        this.varPartItems = [];
        // @ts-ignore
        if (!this.varPartHeader) {
            this.varPartHeader = new VarPartHeader(varPartVersion, varPartType, 0, true, 0);
        }
    }
    getVarPartVersion() {
        if (this.varPartHeader) {
            return this.varPartHeader.getVarPartVersion();
        }
        else {
            throw new Error("var part header not found");
        }
    }
    setVarPartVersion(varPartVersion) {
        this.varPartHeader.setVarPartVersion(varPartVersion);
    }
    getVarPartType() {
        return this.varPartHeader.getVarPartType();
    }
    setVarPartType(varPartType) {
        this.varPartHeader.setVarPartType(varPartType);
    }
    setLastVarPart(lastVarPart) {
        this.varPartHeader.setLastVarPart(lastVarPart);
    }
    isLastVarPart() {
        return this.varPartHeader.getLastVarPart();
    }
    getItemCount() {
        return this.varPartHeader.getItemCount();
    }
    setValue(value) {
        this.value = "";
    }
    getVarPartHeader() {
        return this.varPartHeader;
    }
    getValue() {
        const eyeCatcherValue = ["2A", "54", "48", "2A"];
        const result = this.varPartHeader.getValue();
        for (const currentItem of this.varPartItems) {
            for (const currentValue of currentItem.getValue()) {
                result.push(currentValue);
            }
        }
        for (const currentElement of eyeCatcherValue) {
            result.push(currentElement);
        }
        return result;
    }
    setValueFromDsrPassport(dsrPassport) {
        this.varPartHeader = new VarPartHeader(null, null, null, null, null);
        this.varPartItems = [];
        this.varPartHeader.setPosition(this.position);
        this.varPartHeader.setLength(8);
        this.varPartHeader.setValueFromDsrPassport(dsrPassport);
        //whole lenght inclusive EyeCatcher 
        this.length = this.varPartHeader.getVarPartLength();
        const count = this.varPartHeader.getItemCount();
        //remove header form varPart string to get the first VarPartItem
        let varPartsAsString = this.getElement(this.position + this.varPartHeader.getLength(), dsrPassport.length / 2, dsrPassport);
        for (let i = 0; i < count; i++) {
            //itemId: string[], itemKey: string[], length: number, varPartItemType: VarPartItemType, data: string[]
            const newVarPartItem = new VarPartItem([], [], 0, null, []);
            newVarPartItem.setPosition(0);
            newVarPartItem.setValueFromDsrPassport(varPartsAsString);
            //remove current VarPartItem from varPartsString to get the next VarPartItem
            varPartsAsString = this.getElement(newVarPartItem.getLength(), varPartsAsString.length / 2, varPartsAsString);
            this.varPartItems.push(newVarPartItem);
        }
    }
    getItem(index) {
        if ((!index && index !== 0) || index > this.varPartItems.length - 1) {
            throw new Error('Index invalid');
        }
        return this.varPartItems[index];
    }
    getItemList() {
        return this.varPartItems;
    }
    removeItem(index) {
        if ((!index && index !== 0) || index > this.varPartItems.length - 1) {
            throw new Error('Index invalid');
        }
        this.varPartItems.splice(index, 1);
        this.varPartHeader.setItemCount(this.varPartItems.length);
        this.calcLength();
    }
    getVarPartLength() {
        return this.varPartHeader.getVarPartLength();
    }
    addItem(itemId, itemKey, varPartItemType, data) {
        let dataAsHex = [];
        let dataLength = 0;
        if (!this.varPartItems) {
            this.varPartItems = [];
        }
        switch (varPartItemType) {
            case VarPartItemType_1.VarPartItemType.INTEGER: {
                dataAsHex = Tools_1.Tools.hexStringToHexArray(Tools_1.Tools.transformNumToHexString(data));
                break;
            }
            case VarPartItemType_1.VarPartItemType.UUID: {
                dataAsHex = Tools_1.Tools.hexStringToHexArray(data);
                break;
            }
            case VarPartItemType_1.VarPartItemType.BYTE: {
                dataAsHex = Tools_1.Tools.hexStringToHexArray(Tools_1.Tools.transformBytesToHexString(data));
                break;
            }
            default: {
                dataAsHex = Tools_1.Tools.transformStringToHex(data);
            }
        }
        dataLength = dataAsHex.length;
        const varPartItem = new VarPartItem(Tools_1.Tools.transformStringToHex(itemId), Tools_1.Tools.transformStringToHex(itemKey), 7 + dataLength, //offset because header is also a part 
        varPartItemType, dataAsHex);
        this.varPartItems.push(varPartItem);
        this.varPartHeader.setItemCount(this.varPartItems.length);
        this.calcLength();
    }
    calcLength() {
        let wholeVarPartLength = 4; //offset because eyecatcher is also a part
        for (const currentItem of this.varPartItems) {
            wholeVarPartLength += currentItem.getLength();
        }
        this.varPartHeader.setVarPartLength(wholeVarPartLength);
    }
}
exports.VarPart = VarPart;
/**
 * | Field       | Version | Length  | Last VarPart           | Type                        | Count   |
 * |             |         |         |                        |                             |         |
 * | char length | 2       | 4       | 2                      | 4                           | 4       |
 * | byte length | 1       | 2       | 1                      | 2                           | 2       |
 * | encoding    | hex int | hex int | hex int                | hex int                     | hex int |
 * | comment     | 1       |         | 0 = not last, 1 = last | 1 = System, 2 = Application | Max 255 |
 * **/
class VarPartHeader extends DsrPassportElement {
    constructor(varPartVersion, varPartType, varPartLength, lastVarPart, itemCount) {
        super();
        // [OFFSET, LENGTH]
        this.varPartVersionPos = [0, 1];
        this.varPartLengthPos = [1, 2];
        this.lastVarPartPos = [3, 1];
        this.varPartTypePos = [4, 2];
        this.itemCountPos = [6, 2];
        this.varPartVersion = varPartVersion;
        this.varPartType = varPartType;
        this.varPartLength = varPartLength;
        this.lastVarPart = lastVarPart ? '01' : '00';
        this.itemCount = itemCount;
        this.value = Tools_1.Tools.hexStringToHexArray(this.varPartVersion +
            Tools_1.Tools.changeNumToPassportValue(this.varPartLength, this.varPartLengthPos[1]).join('') +
            this.lastVarPart +
            this.varPartType +
            Tools_1.Tools.changeNumToPassportValue(this.itemCount, this.itemCountPos[1]).join(''));
    }
    setValue(value) {
        this.value = value;
    }
    getVarPartVersion() {
        return this.varPartVersion;
    }
    setVarPartVersion(varPartVersion) {
        this.varPartVersion = varPartVersion;
        this.replaceElement(this.varPartVersionPos[0], this.varPartVersionPos[1], Tools_1.Tools.hexStringToHexArray(this.varPartVersion));
    }
    getVarPartType() {
        return this.varPartType;
    }
    setVarPartType(varPartType) {
        this.varPartType = varPartType;
        this.replaceElement(this.varPartTypePos[0], this.varPartTypePos[1], Tools_1.Tools.hexStringToHexArray(this.varPartType));
    }
    getVarPartLength() {
        return this.varPartLength;
    }
    setVarPartLength(varPartLength) {
        this.varPartLength = varPartLength + 8; //offset because header is a part of it
        this.replaceElement(this.varPartLengthPos[0], this.varPartLengthPos[1], Tools_1.Tools.changeNumToPassportValue(this.varPartLength, this.varPartLengthPos[1]));
    }
    setLastVarPart(lastVarPart) {
        if (lastVarPart) {
            this.lastVarPart = '01';
        }
        else {
            this.lastVarPart = '00';
        }
    }
    getLastVarPart() {
        if (this.lastVarPart === '01') {
            return true;
        }
        return false;
    }
    setItemCount(itemCount) {
        this.itemCount = itemCount;
        this.replaceElement(this.itemCountPos[0], this.itemCountPos[1], Tools_1.Tools.changeNumToPassportValue(itemCount, this.itemCountPos[1]));
    }
    getItemCount() {
        return this.itemCount;
    }
    setValueFromDsrPassport(varParts) {
        if (this.position >= varParts.length) {
            return;
        }
        const header = this.getElement(this.position, this.length, varParts);
        this.itemCount = this.getItemCountFromHeader(header);
        this.value = Tools_1.Tools.hexStringToHexArray(header);
        const typeAsString = this.getElement(this.varPartTypePos[0], this.varPartTypePos[1], header);
        if (typeAsString === VarPartType_1.VarPartType.SYSTEM) {
            this.varPartType = VarPartType_1.VarPartType.SYSTEM;
        }
        else {
            this.varPartType = VarPartType_1.VarPartType.APPLICATION;
        }
        const versionAsString = this.getElement(this.varPartVersionPos[0], this.varPartVersionPos[1], header);
        if (versionAsString === VarPartVersion_1.VarPartVersion.VERSION_1) {
            this.varPartVersion = VarPartVersion_1.VarPartVersion.VERSION_1;
        }
        else {
            this.varPartVersion = VarPartVersion_1.VarPartVersion.VERSION_2;
        }
        this.lastVarPart = this.getElement(this.lastVarPartPos[0], this.lastVarPartPos[1], header);
        const varPartLengthAsHex = this.getElement(this.varPartLengthPos[0], this.varPartLengthPos[1], header);
        this.varPartLength = Tools_1.Tools.transformHexToNumber(varPartLengthAsHex);
        if (isNaN(this.varPartLength)) {
            throw new Error('could not recognize length from var part header');
        }
    }
    replaceElement(offset, length, element) {
        let j = 0;
        for (let i = offset; i < offset + length; i++) {
            this.value[i] = element[j];
            j++;
        }
    }
    getItemCountFromHeader(varPartsAsString) {
        const count = this.getElement(this.itemCountPos[0], this.itemCountPos[1], varPartsAsString);
        const countAsNumber = Number(Tools_1.Tools.transformHexToNumber(count));
        if (isNaN(countAsNumber)) {
            throw new Error('var part count could not convert to number');
        }
        return countAsNumber;
    }
}
exports.VarPartHeader = VarPartHeader;
/**
 * Head:
 * | Field       | Id      | Key     | Type                                     | Length  |
 * |             |         |         |                                          |         |
 * | char length | 4       | 4       | 2                                        | 4       |
 * | byte length | 2       | 2       | 1                                        | 2       |
 * | encoding    | Hex int | Hex int | Hex int                                  | Hex int |
 * | comment     |         |         | 1 = Byte,2 = Integer,3 = UUID,4 = String |         |
 *
 *
 * Data:
 * | Type        | Byte          | Integer | UUID | String        |
 * | char length |               | 8       | 32   |               |
 * | byte length | Item.length-7 | 4       | 16   | Item.Length-7 |
 * | encoding    | Hex           | Hex Int | Hex  | Hex UTF-8     |
 *
 * Comment: Length is always the whole length.(including Head)
 *
 * **/
class VarPartItem extends DsrPassportElement {
    constructor(itemId, itemKey, length, varPartItemType, data) {
        super();
        // [OFFSET, LENGTH]
        this.itemIdPos = [0, 2];
        this.itemKeyPos = [2, 2];
        this.itemTypePos = [4, 1];
        this.itemLengthPos = [5, 2];
        this.itemHeaderPos = [0, 7];
        this.itemId = '';
        this.itemKey = '';
        this.itemData = '';
        this.itemHeader = '';
        this.itemId = itemId.join('');
        this.itemKey = itemKey.join('');
        this.itemType = varPartItemType;
        this.itemData = data.join('');
        this.length = length;
        this.itemHeader = this.itemId +
            this.itemKey +
            this.itemType +
            Tools_1.Tools.changeNumToPassportValue(length, this.itemLengthPos[1]).join('');
        this.value = Tools_1.Tools.hexStringToHexArray(this.itemHeader +
            this.itemData);
    }
    setValue(value) {
        this.value = '';
    }
    getItemId() {
        return Tools_1.Tools.transformHexToString(this.itemId);
    }
    getItemKey() {
        return Tools_1.Tools.transformHexToString(this.itemKey);
    }
    getItemType() {
        return this.itemType;
    }
    getItemData() {
        switch (this.itemType) {
            case VarPartItemType_1.VarPartItemType.INTEGER: {
                return Tools_1.Tools.transformHexToNumber(this.itemData);
            }
            case VarPartItemType_1.VarPartItemType.UUID: {
                return this.itemData;
            }
            case VarPartItemType_1.VarPartItemType.BYTE: {
                return Tools_1.Tools.transformHexStringToBytes(this.itemData);
            }
            default: {
                return Tools_1.Tools.transformHexToString(this.itemData);
            }
        }
    }
    getItemHeader() {
        return this.itemHeader;
    }
    setValueFromDsrPassport(varParts) {
        this.length = this.getLengthOfItem(varParts);
        const subString = this.getElement(this.position, this.length, varParts);
        this.value = Tools_1.Tools.hexStringToHexArray(subString);
        this.itemHeader = this.getElement(this.itemHeaderPos[0], this.itemHeaderPos[1], varParts);
        this.itemId = this.getElement(this.itemIdPos[0], this.itemIdPos[1], this.itemHeader);
        this.itemKey = this.getElement(this.itemKeyPos[0], this.itemKeyPos[1], this.itemHeader);
        this.itemType = this.translateItemType(this.getElement(this.itemTypePos[0], this.itemTypePos[1], this.itemHeader));
        const itemHeaderLength = this.itemHeaderPos[0] + this.itemHeaderPos[1];
        this.itemData = this.getElement(itemHeaderLength, subString.length, subString);
    }
    translateItemType(itemTypeAsHex) {
        switch (itemTypeAsHex) {
            case '01': {
                return VarPartItemType_1.VarPartItemType.BYTE;
            }
            case '02': {
                return VarPartItemType_1.VarPartItemType.INTEGER;
            }
            case '03': {
                return VarPartItemType_1.VarPartItemType.UUID;
            }
            case '04': {
                return VarPartItemType_1.VarPartItemType.STRING;
            }
            default: {
                throw new Error(`could not recognize item type ${itemTypeAsHex}`);
            }
        }
    }
    getLengthOfItem(varParts) {
        const lengthAsHex = this.getElement(this.itemLengthPos[0], this.itemLengthPos[1], varParts);
        const lengthAsNumber = Number(Tools_1.Tools.transformHexToNumber(lengthAsHex));
        if (isNaN(lengthAsNumber)) {
            throw new Error('could not find value for field "Length" (VarPartItem)');
        }
        return lengthAsNumber;
    }
}
exports.VarPartItem = VarPartItem;
var PassportIdentifier;
(function (PassportIdentifier) {
    PassportIdentifier["EYECATCHER"] = "EYECATCHER";
    PassportIdentifier["VERSION"] = "VERSION";
    PassportIdentifier["LENGTH"] = "LENGTH";
    PassportIdentifier["TRACELEVEL"] = "TRACELEVEL";
    PassportIdentifier["COMPONENTID"] = "COMPONENTID";
    PassportIdentifier["COMPONENTTYPE"] = "COMPONENTTYPE";
    PassportIdentifier["SERVICE"] = "SERVICE";
    PassportIdentifier["USER"] = "USER";
    PassportIdentifier["ACTION"] = "ACTION";
    PassportIdentifier["ACTIONTYPE"] = "ACTIONTYPE";
    PassportIdentifier["PREVCOMPONENTID"] = "PREVCOMPONENTID";
    PassportIdentifier["TRANSACTIONID"] = "TRANSACTIONID";
    PassportIdentifier["GUID"] = "GUID";
    PassportIdentifier["CLIENT"] = "CLIENT";
    PassportIdentifier["ROOTCONTEXTID"] = "ROOTCONTEXTID";
    PassportIdentifier["CONNECTIONID"] = "CONNECTIONID";
    PassportIdentifier["CONNECTIONCNT"] = "CONNECTIONCNT";
    PassportIdentifier["VARPARTCOUNT"] = "VARPARTCOUNT";
    PassportIdentifier["VARPARTOFFSET"] = "VARPARTOFFSET";
    PassportIdentifier["VARPARTLIST"] = "VARPARTLIST";
})(PassportIdentifier = exports.PassportIdentifier || (exports.PassportIdentifier = {}));
