"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IMReadableSpan = void 0;
const api_1 = require("@opentelemetry/api");
const core_1 = require("@opentelemetry/core");
const sdk_node_1 = require("@opentelemetry/sdk-node");
const constants = __importStar(require("../../utils/Constants"));
class IMReadableSpan {
    constructor(span, resource) {
        this.span = [];
        this.span.push(span);
        this.attributes = span.attributes;
        this.kind = span.kind;
        this.name = constants.UseCase.IMPUSH;
        this.startTime = process.hrtime();
        this.endTime = process.hrtime();
        this.status = { code: sdk_node_1.api.SpanStatusCode.UNSET };
        this.links = [];
        this.events = [];
        this.duration = (0, core_1.hrTimeDuration)(this.startTime, this.endTime);
        this.ended = true;
        this.resource = resource;
        this.instrumentationLibrary = { name: "" };
    }
    spanContext() {
        return api_1.INVALID_SPAN_CONTEXT;
    }
}
exports.IMReadableSpan = IMReadableSpan;
