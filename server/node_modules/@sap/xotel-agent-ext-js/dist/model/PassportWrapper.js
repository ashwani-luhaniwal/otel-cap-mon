"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PassportWrapper = void 0;
const passport_1 = require("../lib/passport");
const Utils_1 = require("../utils/Utils");
class PassportWrapper {
    constructor(serviceName, wrappable) {
        this.serviceName = serviceName;
        let tmp = wrappable.passport;
        if (tmp == null) {
            this.passport = this.toPassport(wrappable.spanId, wrappable.traceId);
        }
        else {
            this.passport = tmp;
        }
    }
    getWrapped() {
        return this.passport;
    }
    getOutboundPassport() {
        if (this.outBound) {
            return this.outBound;
        }
        const eppString = this.passport.getPassportAsString();
        const outboundPassport = new passport_1.DsrPassport();
        outboundPassport.parsePassport(eppString);
        outboundPassport.setConnectionId((0, Utils_1.uuidv4ForPassport)());
        outboundPassport.setConnectionCount(1);
        outboundPassport.setPreviousComponent(this.serviceName);
        this.outBound = outboundPassport;
        return this.outBound;
    }
    getNextOutboundPassport() {
        if (!this.outBound) {
            this.outBound = this.getOutboundPassport();
        }
        else {
            const outboundString = this.outBound.getPassportAsString();
            const outboundPassport = new passport_1.DsrPassport();
            outboundPassport.parsePassport(outboundString);
            outboundPassport.setConnectionCount(outboundPassport.getConnectionCount() + 1);
            this.outBound = outboundPassport;
        }
        return this.outBound;
    }
    toPassport(spanId, traceId) {
        let connBuild = (0, Utils_1.uuidv4ForPassport)();
        if (spanId) {
            connBuild = "0000000000000000" + spanId;
        }
        let epp = new passport_1.DsrPassport(); // new DsrPassport Object
        epp.createV3Passport(passport_1.TraceFlags.LOW, // (NONE|LOW|MEDIUM|HIGH) Use LOW for just correlation
        this.serviceName, // Passport Creator ComponentName
        0, // Service: 0 for "undefined"
        "<dummy>", // 
        "action", //
        11, // ActionType: 11 denotes HTTP Request
        this.serviceName, // Previous Component PreviousComponentName
        traceId !== null && traceId !== void 0 ? traceId : (0, Utils_1.uuidv4ForPassport)(), // TransactionID 
        "   ", // In case of ABAP system Source Client, else "   "
        passport_1.ComponentTypes.TRACELIB, // Corresponding Component Type (see ComponentTypes)
        (0, Utils_1.uuidv4ForPassport)(), // RootContextId
        connBuild, // ConnectionId  
        1); // ConnectionCounter
        return epp;
    }
}
exports.PassportWrapper = PassportWrapper;
