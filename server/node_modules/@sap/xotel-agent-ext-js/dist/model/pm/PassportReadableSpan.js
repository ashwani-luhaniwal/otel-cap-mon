"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PassportReadableSpan = void 0;
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const core_1 = require("@opentelemetry/core");
const constants = __importStar(require("../../utils/Constants"));
const Utils_1 = require("../../utils/Utils");
class PassportReadableSpan {
    constructor(span, passport) {
        this.span = span;
        this.name = span.name;
        this.parentSpanId = span.parentSpanId;
        this.kind = span.kind;
        this.startTime = span.startTime;
        this.endTime = span.endTime;
        this.status = span.status;
        this.attributes = span.attributes;
        this.links = span.links;
        this.events = span.events;
        this.resource = span.resource;
        this.instrumentationLibrary = span.instrumentationLibrary;
        this.droppedAttributesCount = span.droppedAttributesCount;
        this.droppedEventsCount = span.droppedEventsCount;
        this.droppedLinksCount = span.droppedLinksCount;
        this.spanType = (0, Utils_1.getSpanType)(span);
        this.transId = passport.getTransactionId();
        this.rootCtxId = passport.getRootContextId();
        this.connId = passport.getConnectionId();
        this.connCounter = passport.getConnectionCount();
        this.passportAction = passport.getAction();
        this.request = (0, Utils_1.getRequest)(span, this.spanType);
        this.action = (0, Utils_1.getAction)(span, this.spanType);
        this.responseTimeMs = (0, core_1.hrTimeToMilliseconds)(span.duration);
        const userId = span.attributes[constants.ATT_USER_ID];
        if (userId) {
            this.userId = userId.toString();
        }
        this.setReceivedBytes(span);
        this.setAttribute((0, Utils_1.getPassportAttributeKey)(this.instrumentationLibrary), passport.getPassportAsString());
    }
    spanContext() {
        return this.span.spanContext();
    }
    setAttribute(key, value) {
        if (!(0, core_1.isAttributeKey)(key)) {
            return this;
        }
        if (!(0, core_1.isAttributeValue)(value)) {
            return this;
        }
        this.span.attributes[key] = value;
        return this;
    }
    setAttributes(attributes) {
        for (const [k, v] of Object.entries(attributes)) {
            this.setAttribute(k, v);
        }
        return this;
    }
    addEvent(name, attributesOrStartTime, startTime) {
        this.span.addEvent(name, attributesOrStartTime, startTime);
        return this;
    }
    setStatus(status) {
        this.span.setStatus(status);
        return this;
    }
    updateName(name) {
        this.span.updateName(name);
        return this;
    }
    end(endTime) {
        this.span.end(endTime);
    }
    isRecording() {
        return this.span.isRecording();
    }
    recordException(exception, time) {
        this.span.recordException(exception, time);
    }
    get duration() {
        return this.span.duration;
    }
    get ended() {
        return this.span.ended;
    }
    setReceivedBytes(span) {
        let recBytes;
        if (span.attributes[semantic_conventions_1.SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH]) {
            recBytes = span.attributes[semantic_conventions_1.SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH];
        }
        else if (span.attributes[semantic_conventions_1.SemanticAttributes.MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES]) {
            recBytes = span.attributes[semantic_conventions_1.SemanticAttributes.MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES];
        }
        else if (span.attributes[semantic_conventions_1.SemanticAttributes.MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES]) {
            recBytes = span.attributes[semantic_conventions_1.SemanticAttributes.MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES];
        }
        if (recBytes) {
            const l = recBytes.valueOf();
            if (typeof l === "number") {
                this.receivedBytes = l;
            }
        }
    }
}
exports.PassportReadableSpan = PassportReadableSpan;
