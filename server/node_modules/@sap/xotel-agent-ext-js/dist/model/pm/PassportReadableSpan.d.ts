import { SpanKind, SpanContext, HrTime, SpanStatus, Attributes, Link } from "@opentelemetry/api";
import { ReadableSpan, Span, TimedEvent } from "@opentelemetry/sdk-trace-base";
import { SpanType } from "../../common/SpanType";
import * as api from '@opentelemetry/api';
import { InstrumentationLibrary, InstrumentationScope } from "@opentelemetry/core";
import { Resource } from "@opentelemetry/resources";
import { DsrPassport } from "../../lib/passport";
export declare class PassportReadableSpan implements api.Span, ReadableSpan {
    span: Span;
    transId: string;
    rootCtxId: string;
    connId: string;
    connCounter: number;
    passportAction?: string;
    action?: string;
    request?: string;
    spanType?: SpanType;
    targetInstance?: string;
    receivedBytes?: number;
    statusCode?: string;
    subdomain?: string;
    userId?: string;
    responseTimeMs: number;
    name: string;
    kind: SpanKind;
    parentSpanId?: string;
    startTime: HrTime;
    endTime: HrTime;
    status: SpanStatus;
    attributes: Attributes;
    links: Link[];
    events: TimedEvent[];
    resource: Resource;
    instrumentationLibrary: InstrumentationLibrary | InstrumentationScope;
    droppedAttributesCount: number;
    droppedEventsCount: number;
    droppedLinksCount: number;
    constructor(span: Span, passport: DsrPassport);
    spanContext(): SpanContext;
    setAttribute(key: string, value: api.AttributeValue): this;
    setAttributes(attributes: Attributes): this;
    addEvent(name: string, attributesOrStartTime?: Attributes | api.TimeInput | undefined, startTime?: api.TimeInput | undefined): this;
    setStatus(status: SpanStatus): this;
    updateName(name: string): this;
    end(endTime?: api.TimeInput | undefined): void;
    isRecording(): boolean;
    recordException(exception: api.Exception, time?: api.TimeInput | undefined): void;
    get duration(): api.HrTime;
    get ended(): boolean;
    private setReceivedBytes;
}
