"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregatedSpan = void 0;
const sdk_node_1 = require("@opentelemetry/sdk-node");
const api_1 = require("@opentelemetry/api");
const core_1 = require("@opentelemetry/core");
const AGGREGATED_SPAN = "aggregated span";
class AggregatedSpan {
    constructor(kind, startTime, resource, spanType) {
        this.attributes = {};
        this.kind = kind;
        this.name = AGGREGATED_SPAN;
        this.startTime = startTime;
        this.endTime = process.hrtime();
        this.status = { code: sdk_node_1.api.SpanStatusCode.UNSET };
        this.links = [];
        this.events = [];
        this.duration = (0, core_1.hrTimeDuration)(this.startTime, this.endTime);
        this.ended = true;
        this.resource = resource;
        this.instrumentationLibrary = { name: "" };
        this.spanType = spanType;
        this.droppedAttributesCount = 0;
        this.droppedEventsCount = 0;
        this.droppedLinksCount = 0;
    }
    spanContext() {
        return api_1.INVALID_SPAN_CONTEXT;
    }
    setAttribute(key, value) {
        this.attributes[key] = value;
        return this;
    }
    setAttributes(attributes) {
        this.attributes = attributes;
        return this;
    }
    addEvent(name, attributesOrStartTime, startTime) {
        return this;
    }
    setStatus(status) {
        this.status = status;
        return this;
    }
    updateName(name) {
        this.name = name;
        return this;
    }
    end(endTime) {
        // aggregated spans are already ended
    }
    isRecording() {
        return false;
    }
    recordException(exception, time) {
        // no need to record exceptions for aggregated spans because they are ended anyway
    }
}
exports.AggregatedSpan = AggregatedSpan;
