"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonOtlpMetricExporter = void 0;
const exporter_metrics_otlp_proto_1 = require("@opentelemetry/exporter-metrics-otlp-proto");
const resources_1 = require("@opentelemetry/resources");
const Utils_1 = require("../utils/Utils");
const constants = __importStar(require("../utils/Constants"));
const DestinationService_1 = require("../connectivity/DestinationService");
const logger_1 = require("../common/logger");
class CommonOtlpMetricExporter {
    static getInstance() {
        if (!CommonOtlpMetricExporter.instance) {
            throw new Error("init must be called first");
        }
        return CommonOtlpMetricExporter.instance;
    }
    static init(config) {
        if (!CommonOtlpMetricExporter.instance) {
            CommonOtlpMetricExporter.instance = new CommonOtlpMetricExporter(config);
        }
    }
    static reInit(config) {
        CommonOtlpMetricExporter.instance = new CommonOtlpMetricExporter(config);
    }
    constructor(config) {
        this.exporter = new exporter_metrics_otlp_proto_1.OTLPMetricExporter(config);
        // this.exporter._otlpExporter.headers = ....
    }
    export(metrics, resultCallback) {
        if (!(0, DestinationService_1.isDestinationServiceEnabled)()) {
            logger_1.logger.error("CommonOtlpMetricExporter export: destination service isn't enabled, metric export failed");
            return;
        }
        let resource = new resources_1.Resource({
            [constants.CALM_ATT_TENANT_ID]: (0, Utils_1.getProviderSubaccount)(),
            [constants.CALM_ATT_TENANCY_TENANT_ID]: (0, Utils_1.getProviderSubaccount)(),
            [constants.ATT_CF_SPACE_NAME]: (0, Utils_1.getCfSpaceName)(),
            [constants.CALM_ATT_ACTION]: "data",
            [constants.CALM_ATT_ACTION_VERSION]: "v1",
            [constants.CALM_ATT_USE_CASE]: constants.UseCase.HEALTHMON.valueOf()
        });
        metrics.resource = metrics.resource.merge(resource);
        CommonOtlpMetricExporter.getInstance().exporter.export(metrics, resultCallback);
    }
    forceFlush() {
        return this.exporter.forceFlush();
    }
    selectAggregationTemporality(instrumentType) {
        return this.exporter.selectAggregationTemporality(instrumentType);
    }
    shutdown() {
        return this.exporter.shutdown();
    }
}
exports.CommonOtlpMetricExporter = CommonOtlpMetricExporter;
