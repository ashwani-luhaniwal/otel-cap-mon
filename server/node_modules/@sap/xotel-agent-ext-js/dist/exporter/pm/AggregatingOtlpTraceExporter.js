"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregatingOtlpTraceExporter = void 0;
const core_1 = require("@opentelemetry/core");
const constants = __importStar(require("../../utils/Constants"));
const logger_1 = require("../../common/logger");
const NoopSpanExporter_1 = require("../NoopSpanExporter");
const TenantKey_1 = require("../../utils/TenantKey");
const INTERVAL = 60 * 1000;
class AggregatingOtlpTraceExporter {
    constructor(aggregator, account) {
        this.buffer = new Map();
        this._exporter = new NoopSpanExporter_1.NoopSpanExporter();
        this.shutdownOnce = new core_1.BindOnceFuture(this.doShutDown, this);
        this.account = account !== null && account !== void 0 ? account : "n/a";
        this.aggregator = aggregator;
    }
    set exporter(ex) {
        this._exporter = ex;
    }
    export(spans, resultCallback) {
        if (this.shutdownOnce.isCalled) {
            return;
        }
        logger_1.logger.debug(`AggregatingOtlpTraceExporter: aggregating ${spans.length} spans`);
        this.groupByTenant(spans);
        this.schedule();
        resultCallback({ code: core_1.ExportResultCode.SUCCESS });
    }
    shutdown() {
        return this.shutdownOnce.call();
    }
    flush() {
        this.clearTimer();
        const promises = [];
        this.buffer.forEach((value, key) => {
            const singles = value;
            const tenantKey = JSON.parse(key);
            const aggregated = this.aggregator.aggregate(singles, tenantKey.tenantId, this.account, tenantKey.useCase, tenantKey.subdomain);
            logger_1.logger.debug(`AggregatingOtlpTraceExporter: flushing ${aggregated.singles.length} single spans`);
            logger_1.logger.debug(`AggregatingOtlpTraceExporter: flushing ${aggregated.aggregated.length} aggregated spans`);
            promises.push(new Promise(this.exportCallback(aggregated.singles)));
            promises.push(new Promise(this.exportCallback(aggregated.aggregated)));
        });
        return Promise.all(promises)
            .then(() => {
            this.clearTimer();
            this.buffer.clear();
            Promise.resolve();
        })
            .catch(err => Promise.reject(err));
    }
    doShutDown() {
        return Promise
            .resolve()
            .then(() => this.flush())
            .then(() => this._exporter.shutdown());
    }
    schedule() {
        if (this.timer !== undefined) {
            return;
        }
        this.timer = setTimeout(() => __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.flush();
            }
            catch (error) {
                console.error(error);
            }
        }), INTERVAL);
        this.timer.unref();
    }
    clearTimer() {
        if (this.timer !== undefined) {
            clearTimeout(this.timer);
            this.timer = undefined;
        }
    }
    groupByTenant(spans) {
        const map = new Map();
        spans.forEach(s => {
            const tenantId = makeTenantKey(s);
            const tenantKey = JSON.stringify(tenantId);
            let arr = map.get(tenantKey);
            if (!arr) {
                arr = [];
            }
            arr.push(s);
            map.set(tenantKey, arr);
        });
        map.forEach((val, key) => {
            let arr = this.buffer.get(key);
            if (!arr) {
                arr = [];
            }
            arr.push(...val);
            this.buffer.set(key, arr);
        });
    }
    exportCallback(spans) {
        return (resolve, reject) => {
            this._exporter.export(spans, result => {
                var _a;
                if (result.code === core_1.ExportResultCode.SUCCESS) {
                    resolve();
                }
                else {
                    reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('AggregatingOtlpTraceExporter: span export failed'));
                }
            });
        };
    }
}
exports.AggregatingOtlpTraceExporter = AggregatingOtlpTraceExporter;
function makeTenantKey(span) {
    let tenantId = span.resource.attributes[constants.CALM_ATT_TENANT_ID];
    if (tenantId == null) {
        tenantId = span.resource.attributes[constants.CALM_ATT_TENANCY_TENANT_ID];
    }
    const subdomain = span.resource.attributes[constants.ATT_SUBDOMAIN];
    const useCase = span.resource.attributes[constants.CALM_ATT_USE_CASE];
    if (tenantId && typeof tenantId === 'string' && useCase && typeof useCase === 'string') {
        if (subdomain && typeof subdomain === "string") {
            return new TenantKey_1.TenantKey(tenantId, useCase, subdomain);
        }
        return new TenantKey_1.TenantKey(tenantId, useCase);
    }
    return new TenantKey_1.TenantKey("", "");
}
