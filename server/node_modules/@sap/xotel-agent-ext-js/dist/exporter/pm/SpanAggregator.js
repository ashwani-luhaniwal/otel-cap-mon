"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpanAggregator = void 0;
const api_1 = require("@opentelemetry/api");
const SpanTuple_1 = require("./SpanTuple");
const AggregatedSpan_1 = require("../../model/pm/AggregatedSpan");
const core_1 = require("@opentelemetry/core");
const SpanType_1 = require("../../common/SpanType");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const constants = __importStar(require("../../utils/Constants"));
const Utils_1 = require("../../utils/Utils");
const resources_1 = require("@opentelemetry/resources");
let threshenv = process.env[constants.AGG_THRESHOLD];
let thresh;
if (threshenv != null) {
    thresh = +threshenv;
}
let THRESHOLD = 200;
if (typeof thresh === 'number') {
    THRESHOLD = thresh;
}
let userAggEnv = process.env[constants.AGG_USER];
const AGG_USER = userAggEnv ? userAggEnv.toLowerCase() === 'true' : true;
class SpanAggregator {
    aggregate(singles, tenantId, account, useCase, subdomain) {
        if (singles.length === 0) {
            return {
                aggregated: [],
                singles: []
            };
        }
        const toBeAggregated = [];
        singles
            .filter(this.shouldAggregate)
            .forEach(s => toBeAggregated.push(s));
        const grouped = this.groupByTuple(toBeAggregated);
        const aggregated = this.doAggregate(grouped, singles, tenantId, account, useCase, subdomain);
        const traceIdToIncomingSpans = new Map();
        let remaining = singles.filter(s => {
            const spanId = s.spanContext().spanId;
            for (const a of toBeAggregated) {
                if (a.spanContext().spanId === spanId) {
                    return false;
                }
            }
            if (s.kind.valueOf() === api_1.SpanKind.SERVER || s.name === constants.FESR_SPAN_NAME) {
                traceIdToIncomingSpans.set(s.spanContext().traceId, s);
            }
            return true;
        });
        remaining = remaining.filter(s => traceIdToIncomingSpans.has(s.spanContext().traceId));
        const pairs = this.groupByTraceId(remaining);
        this.addExternalInfo(pairs);
        return {
            aggregated: aggregated,
            singles: remaining
        };
    }
    shouldAggregate(span) {
        const isFastIncoming = span.responseTimeMs < THRESHOLD && span.kind.valueOf() === api_1.SpanKind.SERVER;
        const isMessaging = span.name !== constants.FESR_SPAN_NAME && (span.kind.valueOf() === api_1.SpanKind.PRODUCER || span.kind.valueOf() === api_1.SpanKind.CONSUMER);
        return isFastIncoming || isMessaging;
    }
    addExternalInfo(pairs) {
        for (const traceId in pairs) {
            const arr = pairs[traceId];
            if (arr.length > 1) {
                let inc;
                const out = [];
                arr.forEach(a => {
                    if (a.kind.valueOf() === api_1.SpanKind.SERVER) {
                        inc = a;
                    }
                    else if (a.kind.valueOf() === api_1.SpanKind.CLIENT) {
                        out.push(a);
                    }
                });
                if (inc) {
                    this.enrichIncoming(inc, out);
                }
            }
        }
    }
    enrichIncoming(incoming, outgoing) {
        let extCalls = 0;
        let dbCalls = 0;
        let dbTime = 0;
        let extTime = 0;
        outgoing.forEach(s => {
            const spanType = (0, Utils_1.getSpanType)(s);
            if (SpanType_1.SpanType.HTTPS.valueOf() === (spanType === null || spanType === void 0 ? void 0 : spanType.valueOf())) {
                extCalls++;
                extTime += s.responseTimeMs;
            }
            else if (SpanType_1.SpanType.DB.valueOf() === (spanType === null || spanType === void 0 ? void 0 : spanType.valueOf())) {
                dbCalls++;
                dbTime += s.responseTimeMs;
            }
        });
        incoming
            .setAttribute(constants.ATT_EXT_CALLS, extCalls)
            .setAttribute(constants.ATT_EXT_TIME, extTime)
            .setAttribute(constants.ATT_DB_CALLS, dbCalls)
            .setAttribute(constants.ATT_DB_TIME, dbTime);
    }
    groupByTraceId(arr) {
        return arr.reduce((acc, span) => {
            const traceId = span.spanContext().traceId;
            let arr = acc[traceId];
            if (!arr) {
                arr = [];
            }
            arr.push(span);
            acc[traceId] = arr;
            return acc;
        }, {});
    }
    groupByTuple(spans) {
        const map = new Map();
        spans.forEach(s => {
            const tuple = new SpanTuple_1.SpanTuple(s);
            if (AGG_USER) {
                tuple.userId = "";
            }
            const t = JSON.stringify(tuple);
            let arr = map.get(t);
            if (!arr) {
                arr = [];
            }
            arr.push(s);
            map.set(t, arr);
        });
        return map;
    }
    doAggregate(toBeAggregated, singles, tenantId, account, useCase, subdomain) {
        const res = [];
        toBeAggregated.forEach((value, key) => {
            var _a;
            const tuple = JSON.parse(key);
            const spanNum = value.length;
            let receivedBytes = 0;
            let respTimeMin = Number.MAX_VALUE;
            let respTimeMax = 0;
            let totalRespTime = 0;
            let totalExtTime = 0;
            let totalExtCalls = 0;
            let totalDbCalls = 0;
            let totalDbTime = 0;
            const startTimeNano = Number.MAX_VALUE;
            let startTimeMin = process.hrtime();
            const outBoundCalls = [];
            for (const span of value) {
                receivedBytes += ((_a = span.receivedBytes) !== null && _a !== void 0 ? _a : 0);
                if (span.responseTimeMs < respTimeMin) {
                    respTimeMin = span.responseTimeMs;
                }
                if (span.responseTimeMs > respTimeMax) {
                    respTimeMax = span.responseTimeMs;
                }
                totalRespTime += span.responseTimeMs;
                const start = span.startTime;
                if ((0, core_1.hrTimeToNanoseconds)(span.startTime) < startTimeNano) {
                    startTimeMin = start;
                }
                // outbound calls
                singles
                    .filter(s => s.kind.valueOf() === api_1.SpanKind.CLIENT && s.spanContext().traceId === span.spanContext().traceId)
                    .forEach(s => {
                    const type = s.spanType;
                    const resp = s.responseTimeMs;
                    const attr = s.attributes;
                    if (SpanType_1.SpanType.HTTPS.valueOf() === (type === null || type === void 0 ? void 0 : type.valueOf())) {
                        totalExtCalls++;
                        totalExtTime += resp;
                        outBoundCalls.push(`${attr[semantic_conventions_1.SemanticAttributes.HTTP_METHOD]} ${attr[semantic_conventions_1.SemanticAttributes.HTTP_URL]}`);
                    }
                    else if (SpanType_1.SpanType.DB.valueOf() === (type === null || type === void 0 ? void 0 : type.valueOf())) {
                        totalDbCalls++;
                        totalDbTime += resp;
                        outBoundCalls.push(`${attr[semantic_conventions_1.SemanticAttributes.DB_STATEMENT]}`);
                    }
                });
            }
            let resource = new resources_1.Resource({
                [semantic_conventions_1.SemanticResourceAttributes.SERVICE_NAME]: constants.CALM_SERVICE_NAME,
                [constants.CALM_ATT_SERVICE_TYPE]: constants.CALM_SERVICE_TYPE,
                [constants.ATT_ACCOUNT]: account,
                [constants.CALM_ATT_USE_CASE]: useCase,
                [constants.CALM_ATT_ACTION_CONTENT]: "",
                [constants.CALM_ATT_ACTION_VERSION]: "",
                [constants.CALM_ATT_ACTION]: "",
                [constants.CALM_ATT_TENANT_ID]: tenantId,
                [constants.CALM_ATT_TENANCY_TENANT_ID]: tenantId,
                [constants.ATT_SUBDOMAIN]: subdomain
            });
            const aggregated = new AggregatedSpan_1.AggregatedSpan(tuple.spanKind, startTimeMin, resource, tuple.spanType);
            aggregated
                .setAttribute(constants.ATT_USER_ID, tuple.userId)
                .setAttribute(constants.ATT_COUNT, spanNum)
                .setAttribute(constants.ATT_RESP_TIME, totalRespTime)
                .setAttribute(constants.ATT_RESP_TIME_MIN, respTimeMin)
                .setAttribute(constants.ATT_RESP_TIME_MAX, respTimeMax)
                .setAttribute(constants.ATT_RECEIVED_BYTES, receivedBytes)
                .setAttribute(constants.ATT_EXT_CALLS, totalExtCalls)
                .setAttribute(constants.ATT_EXT_TIME, totalExtTime)
                .setAttribute(constants.ATT_DB_CALLS, totalDbCalls)
                .setAttribute(constants.ATT_DB_TIME, totalDbTime)
                .setAttribute(constants.ATT_OUTBOUND_CALLS, outBoundCalls)
                .setAttribute(this.getActionKey(tuple.spanKind, tuple.spanType), tuple.action)
                .setAttribute(this.getRequestKey(tuple.spanKind, tuple.spanType), tuple.request);
            res.push(aggregated);
        });
        return res;
    }
    getActionKey(kind, spanType) {
        if (SpanType_1.SpanType.HTTPS.valueOf() === (spanType === null || spanType === void 0 ? void 0 : spanType.valueOf())) {
            return semantic_conventions_1.SemanticAttributes.HTTP_METHOD;
        }
        else if (SpanType_1.SpanType.DB.valueOf() === (spanType === null || spanType === void 0 ? void 0 : spanType.valueOf())) {
            return semantic_conventions_1.SemanticAttributes.DB_OPERATION;
        }
        return `action_unkown_spanType_${kind.toString()}`;
    }
    getRequestKey(kind, spanType) {
        if (SpanType_1.SpanType.HTTPS.valueOf() === (spanType === null || spanType === void 0 ? void 0 : spanType.valueOf())) {
            if (api_1.SpanKind.SERVER.valueOf() === kind.valueOf()) {
                return semantic_conventions_1.SemanticAttributes.HTTP_TARGET;
            }
            else if (api_1.SpanKind.CLIENT.valueOf() === kind.valueOf()) {
                return semantic_conventions_1.SemanticAttributes.HTTP_URL;
            }
        }
        else if (SpanType_1.SpanType.DB.valueOf() === (spanType === null || spanType === void 0 ? void 0 : spanType.valueOf())) {
            return semantic_conventions_1.SemanticAttributes.DB_OPERATION;
        }
        return `request_unkown_spanType_${kind.toString()}`;
    }
}
exports.SpanAggregator = SpanAggregator;
