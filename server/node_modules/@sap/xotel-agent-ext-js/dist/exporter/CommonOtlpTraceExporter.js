"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonOtlpTraceExporter = void 0;
const core_1 = require("@opentelemetry/core");
const exporter_trace_otlp_proto_1 = require("@opentelemetry/exporter-trace-otlp-proto");
const logger_1 = require("../common/logger");
const destinationService = __importStar(require("../connectivity/DestinationService"));
const MessageCountersForConsistencyCheck_1 = require("../config/MessageCountersForConsistencyCheck");
const INTERVAL = 60 * 1000;
const MAX_SIZE = 100;
class CommonOtlpTraceExporter {
    static getInstance() {
        if (!CommonOtlpTraceExporter.instance) {
            throw new Error('init must be called first');
        }
        return CommonOtlpTraceExporter.instance;
    }
    constructor(config) {
        this.buffer = [];
        this.exporter = new exporter_trace_otlp_proto_1.OTLPTraceExporter(config);
        this.shutdownOnce = new core_1.BindOnceFuture(this.doShutDown, this);
    }
    static init(config) {
        if (!CommonOtlpTraceExporter.instance) {
            CommonOtlpTraceExporter.instance = new CommonOtlpTraceExporter(config);
        }
    }
    static reInit(config) {
        CommonOtlpTraceExporter.instance = new CommonOtlpTraceExporter(config);
    }
    export(spans, resultCallback) {
        if (this.shutdownOnce.isCalled) {
            return;
        }
        if (this.buffer.length + spans.length < MAX_SIZE) {
            this.buffer.push(...spans);
            this.schedule();
            resultCallback({ code: core_1.ExportResultCode.SUCCESS });
        }
        else {
            this.flush()
                .then(() => {
                this.buffer.push(...spans);
                this.schedule();
                resultCallback({ code: core_1.ExportResultCode.SUCCESS });
            })
                .catch(error => {
                (0, core_1.globalErrorHandler)(error);
                resultCallback({ code: core_1.ExportResultCode.FAILED, error: error });
            });
        }
    }
    shutdown() {
        return this.shutdownOnce.call();
    }
    clearTimer() {
        if (this.timer !== undefined) {
            clearTimeout(this.timer);
            this.timer = undefined;
        }
    }
    flush() {
        this.clearTimer();
        return new Promise((resolve, reject) => {
            if (destinationService.isDestinationServiceEnabled()) {
                logger_1.logger.debug(`CommonOtlpTraceExporter: flushing ${this.buffer.length} spans`);
                let noOfExportedSpans = this.buffer.length;
                CommonOtlpTraceExporter.getInstance().exporter.export(this.buffer, result => {
                    var _a;
                    this.clearTimer();
                    this.buffer = [];
                    if (result.code === core_1.ExportResultCode.SUCCESS) {
                        // Increment successfully exported spans counter
                        (0, MessageCountersForConsistencyCheck_1.incrementSuccessfulExportCounter)(noOfExportedSpans);
                        resolve();
                    }
                    else {
                        // Increment failed export spans counter
                        (0, MessageCountersForConsistencyCheck_1.incrementFailedExportCounter)(noOfExportedSpans);
                        reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('OtlpTraceExporter: span export failed'));
                    }
                });
            }
            else {
                logger_1.logger.error("CommonOtlpTraceExporter: destination service isn't enabled, span export failed");
                reject(new Error("CommonOtlpTraceExporter: destination service isn't enabled, span export failed"));
            }
        });
    }
    schedule() {
        if (this.timer !== undefined) {
            return;
        }
        this.timer = setTimeout(() => __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.flush();
                logger_1.logger.debug("CommonOtlpTraceExporter: flush successful");
                if ((0, MessageCountersForConsistencyCheck_1.checkConsistency)()) {
                    logger_1.logger.info("Export is consistent");
                }
                else {
                    logger_1.logger.info("Export is inconsistent");
                }
            }
            catch (error) {
                logger_1.logger.error(`CommonOtlpTraceExporter: error flushing ${error}`);
            }
        }), INTERVAL);
        this.timer.unref();
    }
    doShutDown() {
        return Promise
            .resolve()
            .then(() => this.flush())
            .then(() => this.exporter.shutdown());
    }
}
exports.CommonOtlpTraceExporter = CommonOtlpTraceExporter;
