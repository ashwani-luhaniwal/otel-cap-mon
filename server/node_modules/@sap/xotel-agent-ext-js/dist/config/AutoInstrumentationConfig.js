"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initAutoInstrumentation = void 0;
const xsenv = require("@sap/xsenv");
const pjson = require('../../package.json');
xsenv.loadEnv();
const logger_1 = require("../common/logger");
const resources_1 = require("@opentelemetry/resources");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const sdk_node_1 = require("@opentelemetry/sdk-node");
const auto_instrumentations_node_1 = require("@opentelemetry/auto-instrumentations-node");
const core_1 = require("@opentelemetry/core");
const api_1 = require("@opentelemetry/api");
const HostMetrics_1 = require("../instrumentation/hm/HostMetrics");
const CalmSampler_1 = require("../sampler/CalmSampler");
const constants = __importStar(require("../utils/Constants"));
// Import Span Processors
const MSProcessor_1 = require("../processor/ms/MSProcessor");
const PassportSpanProcessor_1 = require("../processor/pm/PassportSpanProcessor");
const SapUniversalPropagator_1 = require("../propagator/SapUniversalPropagator");
const CommonSpanProcessor_1 = require("../processor/CommonSpanProcessor");
// Import Span Exporters
const MSExporter_1 = require("../exporter/ms/MSExporter");
const AggregatingOtlpTraceExporter_1 = require("../exporter/pm/AggregatingOtlpTraceExporter");
const CommonOtlpTraceExporter_1 = require("../exporter/CommonOtlpTraceExporter");
// import metric providers
const sdk_metrics_1 = require("@opentelemetry/sdk-metrics");
// import metric exporters
const HealthMetricExporter_1 = require("../exporter/hm/HealthMetricExporter");
const CommonOtlpMetricExporter_1 = require("../exporter/CommonOtlpMetricExporter");
const DestinationService = __importStar(require("../connectivity/DestinationService"));
const HdbInstrumentation_1 = require("../instrumentation/pm/hdb/HdbInstrumentation");
const IMProcessor_1 = require("../processor/im/IMProcessor");
const IMExporter_1 = require("../exporter/im/IMExporter");
// Environment Detector
const envDetector_1 = require("../utils/envDetector");
const SpanAggregator_1 = require("../exporter/pm/SpanAggregator");
let logLevel = api_1.DiagLogLevel.ERROR;
if (process.env.SAP_CALM_DCI_LOG_LEVEL === "debug") {
    logLevel = api_1.DiagLogLevel.DEBUG;
}
api_1.diag.setLogger(new api_1.DiagConsoleLogger(), logLevel);
const INSTRUMENTATION_ENABLED = process.env.SAP_CALM_INSTRUMENTATION_ENABLED || "true";
const TRACING_ENABLED = process.env.SAP_CALM_TRACING_ENABLED || "true";
const METRICS_ENABLED = process.env.SAP_CALM_METRICS_ENABLED || "true";
const METRIC_COLLECTION_INTERVAL = 30000;
const EXPORTERS = {
    spanExporters: {},
    metricExporters: {}
};
logger_1.logger.info(`SAP Cloud ALM Instrumentation - Version ${pjson.version}`);
function initAutoInstrumentation(callback) {
    if (INSTRUMENTATION_ENABLED !== "true") {
        logger_1.logger.info("SAP Cloud ALM Instrumentation disabled");
        if (callback) {
            callback();
        }
        return;
    }
    const resource = initResources();
    const sdk = setupSdk(resource);
    sdk.start();
    try {
        api_1.context.with((0, core_1.suppressTracing)(api_1.context.active()), () => __awaiter(this, void 0, void 0, function* () {
            const { isInfrastructureSupported, isPrerequisitesMatched } = envDetector_1.EnvDetector.validateInfrastructure();
            if (isInfrastructureSupported && isPrerequisitesMatched) {
                yield initializeConnectivity();
            }
            else {
                logger_1.logger.error(`SAP Cloud ALM Instrumentation not initialized. Infrastructure not supported or prerequisites not met`);
            }
            if (callback) {
                callback();
            }
        }));
    }
    catch (error) {
        logger_1.logger.error(`Error initializing SAP Cloud ALM Instrumentation ${error}`);
        if (callback) {
            callback();
        }
    }
    process.on("SIGTERM", () => {
        sdk
            .shutdown()
            .then(() => logger_1.logger.info("SAP Cloud ALM Instrumentation terminated"))
            .catch((error) => logger_1.logger.error(`Error terminating SAP Cloud ALM Instrumentation ${error}`))
            .finally(() => process.exit(0));
    });
}
exports.initAutoInstrumentation = initAutoInstrumentation;
function initializeConnectivity() {
    return __awaiter(this, void 0, void 0, function* () {
        yield DestinationService
            .Init()
            .then(() => {
            validateExporters(EXPORTERS.spanExporters);
            validateExporters(EXPORTERS.metricExporters);
            // Trace Exporters
            EXPORTERS.spanExporters.aggExporter.exporter = CommonOtlpTraceExporter_1.CommonOtlpTraceExporter.getInstance();
            EXPORTERS.spanExporters.msExporter.exporter = CommonOtlpTraceExporter_1.CommonOtlpTraceExporter.getInstance();
            EXPORTERS.spanExporters.imExporter.exporter = CommonOtlpTraceExporter_1.CommonOtlpTraceExporter.getInstance();
            // Metric Exporters
            EXPORTERS.metricExporters.healthExporter.exporter = CommonOtlpMetricExporter_1.CommonOtlpMetricExporter.getInstance();
            if (METRICS_ENABLED === "true") {
                const hostMetrics = new HostMetrics_1.HostMetrics({ name: 'SAP Cloud ALM host metrics' }, "/");
                hostMetrics.start();
                logger_1.logger.info("SAP Cloud ALM Metrics initialized");
            }
            logger_1.logger.info("SAP Cloud ALM Instrumentation initialized");
        })
            .catch((error) => {
            logger_1.logger.error(`Error initializing SAP Cloud ALM Instrumentation ${error.message}`);
        });
    });
}
function setupSdk(resource) {
    let account = resource.attributes[constants.ATT_ACCOUNT];
    if (typeof account !== "string") {
        account = undefined;
    }
    createSpanExporters(account);
    createMetricExporters();
    const spanProcessor = createSpanProcessor();
    const metricReader = createMetricReader();
    return new sdk_node_1.NodeSDK({
        instrumentations: getInstrumentations(),
        textMapPropagator: new SapUniversalPropagator_1.SapUniversalPropagator(),
        sampler: new CalmSampler_1.CalmSampler(),
        resource: resource,
        metricReader: metricReader,
        spanProcessor: spanProcessor
    });
}
function initResources() {
    let resource = new resources_1.Resource({
        [semantic_conventions_1.SemanticResourceAttributes.SERVICE_NAME]: constants.CALM_SERVICE_NAME,
        [constants.CALM_ATT_SERVICE_TYPE]: constants.CALM_SERVICE_TYPE
    });
    const additionalResource = (0, resources_1.detectResourcesSync)({
        detectors: [resources_1.envDetector]
    });
    resource = resource.merge(additionalResource);
    return resource;
}
function createSpanExporters(account) {
    EXPORTERS.spanExporters.aggExporter = new AggregatingOtlpTraceExporter_1.AggregatingOtlpTraceExporter(new SpanAggregator_1.SpanAggregator(), account);
    EXPORTERS.spanExporters.msExporter = new MSExporter_1.MSExporter();
    EXPORTERS.spanExporters.imExporter = new IMExporter_1.IMExporter();
}
function createMetricExporters() {
    EXPORTERS.metricExporters.healthExporter = new HealthMetricExporter_1.HealthMetricExporter();
}
function createSpanProcessor() {
    validateExporters(EXPORTERS.spanExporters);
    return new CommonSpanProcessor_1.CommonSpanProcessor(new PassportSpanProcessor_1.PassportSpanProcessor(EXPORTERS.spanExporters.aggExporter), new MSProcessor_1.MSProcessor(EXPORTERS.spanExporters.msExporter), new IMProcessor_1.IMProcessor(EXPORTERS.spanExporters.imExporter));
}
function createMetricReader() {
    validateExporters(EXPORTERS.metricExporters);
    return new sdk_metrics_1.PeriodicExportingMetricReader({
        exporter: EXPORTERS.metricExporters.healthExporter,
        exportIntervalMillis: METRIC_COLLECTION_INTERVAL
    });
}
function validateExporters(exporters) {
    for (let prop in exporters) {
        // @ts-ignore
        if (exporters[prop] === undefined) {
            throw new Error(`Did not instantiate exporter ${prop}`);
        }
    }
}
function getInstrumentations() {
    if (TRACING_ENABLED !== "true") {
        return [];
    }
    const instrumentations = (0, auto_instrumentations_node_1.getNodeAutoInstrumentations)({
        "@opentelemetry/instrumentation-fs": {
            enabled: false
        }
    });
    instrumentations.push(new HdbInstrumentation_1.HdbInstrumentation());
    return instrumentations;
}
