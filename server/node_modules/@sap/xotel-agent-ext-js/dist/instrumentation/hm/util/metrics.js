"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDiskUsage = exports.getCpuUsage = void 0;
const checkDisk = __importStar(require("check-disk-space"));
const logger_1 = require("../../../common/logger");
const os = __importStar(require("os"));
function getCpuUsage() {
    const cpu = process.cpuUsage();
    const upTimeMicroSeconds = process.uptime() * 1e6;
    const cpus = os.cpus();
    return {
        systemMicroSeconds: cpu.system,
        userMicroSeconds: cpu.user,
        systemUtil: cpu.system / upTimeMicroSeconds / cpus.length,
        userUtil: cpu.user / upTimeMicroSeconds / cpus.length
    };
}
exports.getCpuUsage = getCpuUsage;
function getDiskUsage(path) {
    return new Promise(resolve => {
        checkDisk.default(path)
            .then((value) => {
            const usage = {
                path: value.diskPath,
                freeBytes: value.free,
                totalBytes: value.size,
                usedBytes: value.size - value.free,
                freeUtil: value.free / value.size,
                usedUtil: (value.size - value.free) / value.size
            };
            resolve(usage);
        })
            .catch((err) => {
            logger_1.logger.error(`Health Monitoring getDiskUsage: error ${err}`);
            resolve({
                path: path,
                freeBytes: -1,
                totalBytes: -1,
                usedBytes: -1,
                freeUtil: 0,
                usedUtil: 0
            });
        });
    });
}
exports.getDiskUsage = getDiskUsage;
