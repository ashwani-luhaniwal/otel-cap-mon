"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostMetrics = void 0;
const host_metrics_1 = require("@opentelemetry/host-metrics");
const util_1 = require("@opentelemetry/host-metrics/build/src/util");
const otelStats = __importStar(require("@opentelemetry/host-metrics/build/src/stats/common"));
const constants = __importStar(require("../../utils/Constants"));
const stats = __importStar(require("./util/metrics"));
const Utils_1 = require("../../utils/Utils");
const NotificationPoller_1 = require("../../connectivity/NotificationPoller");
const logger_1 = require("../../common/logger");
const MICROSECONDS = 1e6;
const USER = "user";
const SYSTEM = "system";
const USED = "used";
const FREE = "free";
class HostMetrics extends host_metrics_1.BaseMetrics {
    constructor(config, root) {
        super(config);
        this.getCpuUsage = (0, util_1.throttle)(stats.getCpuUsage, this._maxTimeoutUpdateMS);
        this.getDiskUsage = (0, util_1.throttle)(() => {
            return stats.getDiskUsage(this.root);
        }, this._maxTimeoutUpdateMS);
        this.getMemoryData = (0, util_1.throttle)(otelStats.getMemoryData, this._maxTimeoutUpdateMS);
        this.root = root;
    }
    start() {
        this._createMetrics();
    }
    _createMetrics() {
        this._meter
            .createObservableCounter(constants.MetricName.PROCESS_CPU_TIME, {
            description: "Total CPU seconds broken down by different states.",
            unit: "s",
        })
            .addCallback(wrap(observableResult => {
            const cpuUsageData = this.getCpuUsage();
            this.updateCpuTime(observableResult, cpuUsageData);
        }));
        this._meter
            .createObservableGauge(constants.MetricName.PROCESS_CPU_UTILIZATION, {
            description: "Difference in process.cpu.time since the last measurement, divided by the elapsed time and number of CPUs available to the process.",
            unit: "1"
        })
            .addCallback(wrap(observableResult => {
            const cpuUsageData = this.getCpuUsage();
            this.updateCpuUtilization(observableResult, cpuUsageData);
        }));
        this._meter
            .createObservableUpDownCounter(constants.MetricName.SYSTEM_FILE_SYSTEM_USAGE, {
            description: "Disk usage in bytes",
            unit: "By"
        })
            .addCallback(wrap((observableResult) => __awaiter(this, void 0, void 0, function* () {
            const diskUsage = yield this.getDiskUsage();
            this.updateDiskUsage(observableResult, diskUsage);
        })));
        this._meter
            .createObservableGauge(constants.MetricName.SYSTEM_FILE_SYSTEM_UTILIZATION, {
            description: "Disk utilization in the range of [0, 1]",
            unit: "1"
        })
            .addCallback(wrap((observableResult) => __awaiter(this, void 0, void 0, function* () {
            const diskUsage = yield this.getDiskUsage();
            this.updateDiskUtilization(observableResult, diskUsage);
        })));
        this._meter
            .createObservableUpDownCounter(constants.MetricName.SYSTEM_MEMORY_USAGE, {
            description: "System memory usage in bytes",
            unit: "By"
        })
            .addCallback(wrap(observableResult => {
            const memoryUsage = this.getMemoryData();
            this.updateMemoryUsage(observableResult, memoryUsage);
        }));
        this._meter
            .createObservableGauge(constants.MetricName.SYSTEM_MEMORY_UTILIZATION, {
            description: "System memory utilization in the ration of [0, 1]",
            unit: "1"
        })
            .addCallback(wrap(observableResult => {
            const memoryUsage = this.getMemoryData();
            this.updateMemoryUtilization(observableResult, memoryUsage);
        }));
    }
    updateCpuTime(observableResult, cpuUsageData) {
        observableResult.observe(cpuUsageData.userMicroSeconds / MICROSECONDS, {
            state: USER
        });
        observableResult.observe(cpuUsageData.systemMicroSeconds / MICROSECONDS, {
            state: SYSTEM
        });
    }
    updateCpuUtilization(observableResult, cpuUsageData) {
        observableResult.observe(cpuUsageData.userUtil, {
            state: USER
        });
        observableResult.observe(cpuUsageData.systemUtil, {
            state: SYSTEM
        });
    }
    updateDiskUsage(observableResult, diskUsage) {
        observableResult.observe(diskUsage.freeBytes, {
            state: FREE,
            mountpoint: diskUsage.path
        });
        observableResult.observe(diskUsage.usedBytes, {
            state: USED,
            mountpoint: diskUsage.path
        });
    }
    updateDiskUtilization(observableResult, diskUsage) {
        observableResult.observe(diskUsage.freeUtil, {
            state: FREE,
            mountpoint: diskUsage.path
        });
        observableResult.observe(diskUsage.usedUtil, {
            state: USED,
            mountpoint: diskUsage.path
        });
    }
    updateMemoryUsage(observableResult, memoryData) {
        observableResult.observe(memoryData.free, {
            state: FREE,
        });
        observableResult.observe(memoryData.used, {
            state: USED,
        });
    }
    updateMemoryUtilization(observableResult, memoryData) {
        observableResult.observe(memoryData.freeP, {
            state: FREE,
        });
        observableResult.observe(memoryData.usedP, {
            state: USED,
        });
    }
}
exports.HostMetrics = HostMetrics;
function wrap(fn) {
    return (observableResult) => __awaiter(this, void 0, void 0, function* () {
        const providerSubaccount = (0, Utils_1.getProviderSubaccount)();
        const serviceType = constants.CALM_SERVICE_TYPE;
        if (typeof providerSubaccount !== "string" || !NotificationPoller_1.NotificationPoller.isDataCollectionTurnedOn(serviceType, providerSubaccount, constants.UseCase.HEALTHMON.valueOf())) {
            logger_1.logger.debug(`HostMetrics createMetrics: data collection is switched off for ${serviceType}-${providerSubaccount}-${constants.UseCase.HEALTHMON.valueOf()}, don't create metrics`);
            return;
        }
        yield fn(observableResult);
    });
}
