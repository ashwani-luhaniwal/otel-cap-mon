"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildUrlsForManagedCloud = exports.buildUrlsForCustomerExtension = exports.initialize = exports.isCustomerExtension = void 0;
const xsenv = require("@sap/xsenv");
xsenv.loadEnv();
const logger_1 = require("../common/logger");
let isCustExt;
const baseEndpointFormat_prod_mc = (datacenter) => `https://dcr-app2app.cert.cfapps.${datacenter}.hana.ondemand.com`;
const baseEndpointFormat_non_prod_mc = (landscape, datacenter) => `https://dcr-app2app-${landscape}.cert.cfapps.${datacenter}.hana.ondemand.com`;
const baseEndpointFormat_prod_custext = (datacenter) => `https://dri-app2app.cfapps.${datacenter}.hana.ondemand.com`;
const baseEndpointFormat_non_prod_custext = (landscape, datacenter) => `https://dri-app2app-${landscape}.cfapps.${datacenter}.hana.ondemand.com`;
function isCustomerExtension() {
    return isCustExt;
}
exports.isCustomerExtension = isCustomerExtension;
const initialize = (destinationResponse) => __awaiter(void 0, void 0, void 0, function* () {
    let pollingBaseURL = "https://notifications-dri-app2app";
    let endPointTraces = '';
    let endPointMetrics = '';
    let urlReplacementVar = '';
    if (destinationResponse.Authentication === 'OAuth2ClientCredentials') {
        isCustExt = true;
        const endpoints = (0, exports.buildUrlsForCustomerExtension)(destinationResponse.URL);
        endPointTraces = endpoints.endpointTraces;
        endPointMetrics = endpoints.endpointMetrics;
        urlReplacementVar = "/oauth/otlp/v1/traces";
    }
    else if (destinationResponse.Authentication === 'NoAuthentication') {
        isCustExt = false;
        const endpoints = (0, exports.buildUrlsForManagedCloud)(destinationResponse.URL);
        endPointTraces = endpoints.endpointTraces;
        endPointMetrics = endpoints.endpointMetrics;
        urlReplacementVar = "/otlp/v1/traces/withcert";
    }
    if (endPointTraces.length != 0) {
        if (endPointTraces.includes('-test')) {
            pollingBaseURL = pollingBaseURL.concat('-test');
        }
        else if (endPointTraces.includes('-dev')) {
            pollingBaseURL = pollingBaseURL.concat('-dev');
        }
    }
    const index1 = endPointTraces.indexOf('.');
    if (index1 != -1) {
        const domain = endPointTraces.substring(index1, endPointTraces.length);
        pollingBaseURL = pollingBaseURL.concat(domain);
        pollingBaseURL = pollingBaseURL.replace(urlReplacementVar, "");
        logger_1.logger.debug(`InitializeEndpoints: Polling Base URL: ${pollingBaseURL}`);
        // await NotificationPoller.init(pollingBaseURL, SERVICE_TYPE, DATACENTER, POLL_INTERVAL)
    }
    return {
        pollingBaseURL: pollingBaseURL,
        endPointTraces: endPointTraces,
        endPointMetrics: endPointMetrics,
    };
});
exports.initialize = initialize;
const buildUrlsForCustomerExtension = (url) => {
    let baseEndpointUrl;
    let datacenter;
    let landscape;
    let endpointTraces = '';
    let endpointMetrics = '';
    url = url.replace('https://', '');
    if (url.includes('dev') || url.includes('test')) {
        landscape = url.split('.')[0];
        datacenter = url.split('.')[1];
        if (datacenter === 'eu10') {
            datacenter = datacenter.concat('-004');
        }
        baseEndpointUrl = baseEndpointFormat_non_prod_custext(landscape, datacenter);
        endpointTraces = baseEndpointUrl + `/oauth/otlp/v1/traces`;
        endpointMetrics = baseEndpointUrl + `/oauth/otlp/v1/metrics`;
    }
    else {
        datacenter = url.split('.')[0];
        baseEndpointUrl = baseEndpointFormat_prod_custext(datacenter);
        endpointTraces = baseEndpointUrl + `/oauth/otlp/v1/traces`;
        endpointMetrics = baseEndpointUrl + `/oauth/otlp/v1/metrics`;
    }
    return {
        endpointTraces: endpointTraces,
        endpointMetrics: endpointMetrics
    };
};
exports.buildUrlsForCustomerExtension = buildUrlsForCustomerExtension;
const buildUrlsForManagedCloud = (url) => {
    url = url.replace('https://', '');
    let baseEndpointUrl;
    let datacenter;
    let endpointTraces = '';
    let endpointMetrics = '';
    if (url.includes('test') || url.includes('dev')) {
        const landscape = url.split('.')[0];
        datacenter = url.split('.')[1];
        if (datacenter === 'eu10') {
            datacenter = datacenter.concat('-004');
        }
        baseEndpointUrl = baseEndpointFormat_non_prod_mc(landscape, datacenter);
        endpointTraces = baseEndpointUrl + `/otlp/v1/traces/withcert`;
        endpointMetrics = baseEndpointUrl + `/otlp/v1/metrics`;
    }
    else {
        datacenter = url.split('.')[0];
        baseEndpointUrl = baseEndpointFormat_prod_mc(datacenter);
        endpointTraces = baseEndpointUrl + `/otlp/v1/traces/withcert`;
        endpointMetrics = baseEndpointUrl + `/otlp/v1/metrics`;
    }
    return {
        endpointTraces: endpointTraces,
        endpointMetrics: endpointMetrics
    };
};
exports.buildUrlsForManagedCloud = buildUrlsForManagedCloud;
