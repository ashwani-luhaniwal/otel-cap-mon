import { OTLPExporterNodeConfigBase } from "@opentelemetry/otlp-exporter-base";
import { OTLPMetricExporterOptions } from "@opentelemetry/exporter-metrics-otlp-http";
import { DestinationCredential, OAuthResponse } from '../utils/Types';
export declare function getVcapDestination(): DestinationCredential;
export declare function getVcapApplication(): any;
export declare function isDestinationServiceEnabled(): boolean;
export declare function getClientKeyAndCertificate(): {
    key: string;
    cert: string;
};
export declare const getTraceCollectorOptions: () => OTLPExporterNodeConfigBase;
export declare const getMetricCollectorOptions: () => OTLPExporterNodeConfigBase & OTLPMetricExporterOptions;
export declare const generateOAuthToken: (tokenUrl: string, opts: any) => Promise<OAuthResponse>;
export declare function getOAuthToken(credentials: DestinationCredential): Promise<OAuthResponse>;
export declare function splitCertificateChain(certificateChain: string): string[];
export declare function isValidCertficateChain(certificateChain: string): boolean;
export declare const getCertificateAndValidate: (certificateName: string, token: OAuthResponse) => Promise<any>;
export declare const getDestination: (token: OAuthResponse) => Promise<any>;
export declare const createCertificate: (certificateName: string, token: OAuthResponse) => Promise<any>;
export declare const deleteCertificate: (certificateName: string, token: OAuthResponse) => Promise<void>;
export declare const certificateRuntimeFlow: (certificateName: string, token: OAuthResponse) => Promise<void>;
export declare const enableCertificateAuthentication: (certificateName: string) => Promise<void>;
export declare const Init: () => Promise<void>;
