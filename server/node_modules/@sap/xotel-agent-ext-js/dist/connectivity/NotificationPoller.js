"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationPoller = void 0;
const xsenv = require("@sap/xsenv");
xsenv.loadEnv();
const logger_1 = require("../common/logger");
const node_fetch_1 = __importDefault(require("node-fetch"));
const https_1 = __importDefault(require("https"));
const OAuthService = __importStar(require("../connectivity/OAuthService"));
const destinationService = __importStar(require("./DestinationService"));
const InitializeEndpoints = __importStar(require("./InitializeEndpoints"));
const envDetector_1 = require("../utils/envDetector");
const Constants_1 = require("../utils/Constants");
const { isPrerequisitesMatched, detectedInfrastructure } = envDetector_1.EnvDetector.validateInfrastructure();
let subaccountId;
if (detectedInfrastructure === Constants_1.Environment.CF && process.env.VCAP_SERVICES != undefined && isPrerequisitesMatched) {
    const VCAP_SERVICES = JSON.parse(process.env.VCAP_SERVICES);
    subaccountId = VCAP_SERVICES.destination[0].credentials.tenantid;
}
else {
    logger_1.logger.error(`DestinationService: VCAP_SERVICES config is not present`);
}
let lastUpdatedTimeStamp;
let tenantFilterMap = new Map();
let baseUrl;
let serviceType;
let datacenter;
let timeDelayInSeconds;
class NotificationPoller {
    static init(url, svc, dc, time) {
        return __awaiter(this, void 0, void 0, function* () {
            baseUrl = url;
            serviceType = svc;
            datacenter = dc;
            timeDelayInSeconds = time;
            try {
                let pollUrl = NotificationPoller.getPollUrl();
                yield NotificationPoller.pollForNotifications(pollUrl);
                NotificationPoller.schedule();
            }
            catch (error) {
                logger_1.logger.error(`Error Polling for notification ${error.message}`);
            }
        });
    }
    static schedule() {
        return __awaiter(this, void 0, void 0, function* () {
            setInterval(function () {
                return __awaiter(this, void 0, void 0, function* () {
                    try {
                        let pollUrl = NotificationPoller.getPollUrl();
                        yield NotificationPoller.pollForNotifications(pollUrl);
                    }
                    catch (error) {
                        logger_1.logger.error(`Error Polling for notification ${error.message}`);
                    }
                });
            }, timeDelayInSeconds * 1000);
        });
    }
    static getPollUrl() {
        let pollUrl;
        if (InitializeEndpoints.isCustomerExtension()) {
            pollUrl = baseUrl + "/oauth/notification/configs/consume?mcSubaccountId=" + subaccountId;
        }
        else {
            pollUrl = baseUrl + "/notification/consume/withcert?serviceType=" + serviceType + "&datacenter=" + datacenter;
            if (null != lastUpdatedTimeStamp) {
                pollUrl = pollUrl + "&timestamp=" + lastUpdatedTimeStamp;
            }
        }
        return pollUrl;
    }
    static pollForNotifications(pollUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            let options;
            if (InitializeEndpoints.isCustomerExtension()) {
                // Polling for notifications using OAuth
                logger_1.logger.info(`NotificationPoller: Polling for notifications using OAuth`);
                let oAuthClientToken = yield OAuthService.getCustOAuthTokenValue();
                options = {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${oAuthClientToken}`,
                        'Content-Type': 'application/json'
                    },
                };
            }
            else {
                // Polling for notifiations using certificate based authentication
                logger_1.logger.info(`NotificationPoller: Polling for notifications using certificate`);
                const httpsAgent = new https_1.default.Agent({
                    keepAlive: false,
                    maxSockets: 10,
                    maxFreeSockets: 3,
                    timeout: 60000,
                    cert: destinationService.getClientKeyAndCertificate().cert,
                    key: destinationService.getClientKeyAndCertificate().key // process.env.OTEL_EXPORTER_CLIENT_KEY,//fs.readFileSync(filePath + "instance.key"),
                });
                options = {
                    method: 'GET',
                    agent: httpsAgent,
                };
            }
            yield (0, node_fetch_1.default)(pollUrl, options)
                .then((response) => __awaiter(this, void 0, void 0, function* () {
                if (!response.ok) {
                    const text = yield response.text();
                    logger_1.logger.error(`Error Polling for notification ${response.status} ${encodeURI(text)}`);
                }
                else {
                    const body = (yield response.json());
                    NotificationPoller.addToCache(body);
                }
            })).catch(error => {
                logger_1.logger.error(`Error Polling for notification : ${error.message}`);
            });
        });
    }
    static addToCache(NotificationPayload) {
        return __awaiter(this, void 0, void 0, function* () {
            let notifications = NotificationPayload.notifications;
            if (notifications.length > 0) {
                // let lastUpdatedTimeStamp = NotificationPayload.lastUpdatedTimeStamp
                // tenantFilterMap.set("LastUpdatedTimeStamp", lastUpdatedTimeStamp)
                lastUpdatedTimeStamp = NotificationPayload.lastUpdatedTimeStamp;
            }
            for (let notification of notifications) {
                const tenantId = notification.tenantId;
                const usecases = notification.usecases;
                for (let usecase of usecases) {
                    const usecaseName = usecase.useCaseName;
                    const latestConfiguration = usecase.latestConfiguration;
                    const categories = latestConfiguration.categories;
                    const isDataCollectionOn = latestConfiguration.isDataCollectionOn;
                    const timestamp = latestConfiguration.timestamp;
                    const usecaseKey = `${serviceType}-${usecaseName}`;
                    const value = {
                        isDataCollectionOn: isDataCollectionOn,
                        categories: categories,
                        configurationVersion: timestamp
                    };
                    let usecaseMap = tenantFilterMap.get(usecaseKey);
                    if (usecaseMap) {
                        usecaseMap.set(tenantId, value);
                    }
                    else {
                        usecaseMap = new Map();
                        usecaseMap.set(tenantId, value);
                    }
                    tenantFilterMap.set(usecaseKey, usecaseMap);
                    // tenantFilterMap.set(key, isDataCollectionOn)
                    // configFilterMap.set(key, categories)
                    // tenantFilterMap.set(`${key}-config`, categories)
                    if (usecase.errorNotifications) {
                        // Logic for handling error Notification goes here
                    }
                }
            }
        });
    }
    static isDataCollectionTurnedOn(serviceType, tenantId, usecaseName) {
        if (serviceType === "" || tenantId === "" || usecaseName === "") {
            return false;
        }
        // const key = `${serviceType}-${tenantId}-${usecaseName}`
        // const isDataCollectionOn = tenantFilterMap.get(key)
        // return isDataCollectionOn === "true"
        const usecaseKey = `${serviceType}-${usecaseName}`;
        const usecaseMap = tenantFilterMap.get(usecaseKey);
        if (!usecaseMap || !usecaseMap.get(tenantId)) {
            return false;
        }
        const configValue = usecaseMap.get(tenantId);
        if (configValue) {
            return configValue.isDataCollectionOn === "true";
        }
        else {
            return false;
        }
    }
    static getFilterCategories(serviceType, tenantId, usecaseName) {
        if (serviceType === "" || tenantId === "" || usecaseName === "") {
            return [];
        }
        // const key = `${serviceType}-${tenantId}-${usecaseName}`
        // const categories = configFilterMap.get(key)
        // return categories ? categories : []
        const usecaseKey = `${serviceType}-${usecaseName}`;
        const usecaseMap = tenantFilterMap.get(usecaseKey);
        if (!usecaseMap || !usecaseMap.get(tenantId)) {
            return [];
        }
        const configValue = usecaseMap.get(tenantId);
        if (configValue) {
            return configValue.categories;
        }
        else {
            return [];
        }
    }
    // Utility Function only to be called form unit test
    static getCachedMaps() {
        return {
            tenantFilterMap: tenantFilterMap,
            // configFilterMap: configFilterMap
        };
    }
}
exports.NotificationPoller = NotificationPoller;
// (async function () {
//     // await NotificationPoller.init("http://localhost:6000", "CALM_A2A_E2E", "E2E_EU10", 30)
//     await NotificationPoller.init("https://notifications-dri-app2app-test.cert.cfapps.eu10.hana.ondemand.com", "CALM_A2A_E2E", "E2E_EU10", 30)
// })()
