"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAndSetOAuthToken = exports.getCustOAuthTokenValue = exports.schedule = exports.initCustomerOAuth = void 0;
const logger_1 = require("../common/logger");
const CommonOtlpTraceExporter_1 = require("../exporter/CommonOtlpTraceExporter");
const node_fetch_1 = __importDefault(require("node-fetch"));
const cacheProvider = __importStar(require("../utils/cache-provider"));
const DestinationService = __importStar(require("./DestinationService"));
const CommonOtlpMetricExporter_1 = require("../exporter/CommonOtlpMetricExporter");
const oAuthTokenKey = 'sap.calm.oAuthToken';
let CLIENT_ID;
let CLIENT_SECRET;
let TOKEN_URL;
const initCustomerOAuth = (clientId, clientSecret, tokenUrl) => __awaiter(void 0, void 0, void 0, function* () {
    CLIENT_ID = clientId;
    CLIENT_SECRET = clientSecret;
    TOKEN_URL = tokenUrl;
    const traceCollectorOptions = DestinationService.getTraceCollectorOptions();
    const metricCollectorOptions = DestinationService.getMetricCollectorOptions();
    try {
        yield (0, exports.createAndSetOAuthToken)(clientId, clientSecret, tokenUrl);
        const bearer = yield getCustOAuthTokenValue();
        if (traceCollectorOptions.headers) {
            traceCollectorOptions.headers['Authorization'] = `Bearer ${bearer}`;
        }
        else {
            traceCollectorOptions.headers = {
                'Authorization': `Bearer ${bearer}`,
            };
        }
        if (metricCollectorOptions.headers) {
            metricCollectorOptions.headers['Authorization'] = `Bearer ${bearer}`;
        }
        else {
            metricCollectorOptions.headers = {
                'Authorization': `Bearer ${bearer}`,
            };
        }
        CommonOtlpTraceExporter_1.CommonOtlpTraceExporter.init(traceCollectorOptions);
        CommonOtlpMetricExporter_1.CommonOtlpMetricExporter.init(metricCollectorOptions);
        setTimeout(exports.schedule, cacheProvider.getInstance().getTtl(oAuthTokenKey) - Date.now());
    }
    catch (err) {
        logger_1.logger.error(`OAuthService: could not fetch customer oauth token from cache with error ${err}`);
    }
});
exports.initCustomerOAuth = initCustomerOAuth;
const schedule = () => __awaiter(void 0, void 0, void 0, function* () {
    const traceCollectorOptions = DestinationService.getTraceCollectorOptions();
    const metricCollectorOptions = DestinationService.getMetricCollectorOptions();
    const bearer = yield getCustOAuthTokenValue();
    if (traceCollectorOptions.headers) {
        traceCollectorOptions.headers['Authorization'] = `Bearer ${bearer}`;
    }
    else {
        traceCollectorOptions.headers = {
            'Authorization': `Bearer ${bearer}`,
        };
    }
    if (metricCollectorOptions.headers) {
        metricCollectorOptions.headers['Authorization'] = `Bearer ${bearer}`;
    }
    else {
        metricCollectorOptions.headers = {
            'Authorization': `Bearer ${bearer}`,
        };
    }
    CommonOtlpTraceExporter_1.CommonOtlpTraceExporter.reInit(traceCollectorOptions);
    CommonOtlpMetricExporter_1.CommonOtlpMetricExporter.reInit(metricCollectorOptions);
    setTimeout(exports.schedule, cacheProvider.getInstance().getTtl(oAuthTokenKey) - Date.now());
});
exports.schedule = schedule;
function getCustOAuthTokenValue() {
    return __awaiter(this, void 0, void 0, function* () {
        if (cacheProvider.getInstance().get(oAuthTokenKey)) {
            return cacheProvider.getInstance().get(oAuthTokenKey);
        }
        else {
            yield (0, exports.createAndSetOAuthToken)(CLIENT_ID, CLIENT_SECRET, TOKEN_URL);
            return cacheProvider.getInstance().get(oAuthTokenKey);
        }
    });
}
exports.getCustOAuthTokenValue = getCustOAuthTokenValue;
const createAndSetOAuthToken = (clientId, clientSecret, tokenUrl) => __awaiter(void 0, void 0, void 0, function* () {
    const opts = {
        method: "POST",
        json: true,
        headers: {
            'Authorization': 'Basic ' + Buffer.from(clientId + ':' + clientSecret).toString('base64'),
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `grant_type=client_credentials&client_id=${clientId}`,
    };
    yield (0, node_fetch_1.default)(tokenUrl + '/oauth/token?grant_type=client_credentials', opts)
        .then((resp) => __awaiter(void 0, void 0, void 0, function* () {
        if (!resp.ok) {
            const text = yield resp.text();
            logger_1.logger.error(`OAuthService: OAuth token could not be fetched with status ${resp.status} ${encodeURI(text)}. Retrying fetch..`);
            cacheProvider.getInstance().set(oAuthTokenKey, 'retry-error-token', 10);
        }
        else {
            const response = yield resp.json();
            const validity = response.expires_in - 10 * 60; // In seconds ~ update 10mins before expiry
            cacheProvider.getInstance().set(oAuthTokenKey, response.access_token, validity);
        }
    }))
        .catch(err => {
        logger_1.logger.error(`OAuthService: OAuth token could not be fetched with error ${err}. Retrying fetch..`);
        cacheProvider.getInstance().set(oAuthTokenKey, 'retry-error-token', 10);
    });
});
exports.createAndSetOAuthToken = createAndSetOAuthToken;
