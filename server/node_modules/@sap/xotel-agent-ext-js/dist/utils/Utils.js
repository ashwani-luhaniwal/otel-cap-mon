"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeUrl = exports.getEnvResourceAttributes = exports.getCfSpaceName = exports.getProviderSubaccount = exports.getPassportAttributeKey = exports.uuidv4ForPassport = exports.getAction = exports.getRequest = exports.getSpanType = void 0;
const SpanType_1 = require("../common/SpanType");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const constants = __importStar(require("./Constants"));
const uuid_1 = require("uuid");
const DestinationService_1 = require("../connectivity/DestinationService");
const httpInstrumentationLibs = [
    "@opentelemetry/instrumentation-http",
    "@opentelemetry/instrumentation-express",
    "@opentelemetry/instrumentation-fastify",
    "@opentelemetry/instrumentation-koa",
    "@opentelemetry/instrumentation-restify",
    "@opentelemetry/instrumentation-router"
];
function getSpanType(span) {
    if (span.attributes[semantic_conventions_1.SemanticAttributes.HTTP_METHOD] !== undefined) {
        return SpanType_1.SpanType.HTTPS;
    }
    if (span.attributes[semantic_conventions_1.SemanticAttributes.DB_OPERATION] !== undefined || span.attributes[semantic_conventions_1.SemanticAttributes.DB_STATEMENT] !== undefined) {
        return SpanType_1.SpanType.DB;
    }
    if (span.attributes[constants.ATT_PP_ACTION] !== undefined) {
        return SpanType_1.SpanType.SAP_UI5;
    }
    if (span.attributes[semantic_conventions_1.SemanticAttributes.MESSAGING_SYSTEM] !== undefined || span.attributes[semantic_conventions_1.SemanticAttributes.MESSAGING_OPERATION] !== undefined) {
        return SpanType_1.SpanType.MSG;
    }
    return undefined;
}
exports.getSpanType = getSpanType;
function getRequest(span, spanType) {
    if (SpanType_1.SpanType.HTTPS.valueOf() === (spanType === null || spanType === void 0 ? void 0 : spanType.valueOf())) {
        let url = span.attributes[semantic_conventions_1.SemanticAttributes.HTTP_TARGET];
        if (url === undefined) {
            url = span.attributes[semantic_conventions_1.SemanticAttributes.HTTP_URL];
        }
        if (url !== undefined) {
            return url.toString();
        }
    }
    else if (SpanType_1.SpanType.DB.valueOf() === (spanType === null || spanType === void 0 ? void 0 : spanType.valueOf())) {
        const statement = span.attributes[semantic_conventions_1.SemanticAttributes.DB_STATEMENT];
        if (statement !== undefined) {
            let s = statement.toString();
            if (s.startsWith("connect ")) {
                s = "connect..."; // hiding credentials
                span.attributes[semantic_conventions_1.SemanticAttributes.DB_STATEMENT] = s;
            }
            return s;
        }
    }
    else if (SpanType_1.SpanType.MSG.valueOf() === (spanType === null || spanType === void 0 ? void 0 : spanType.valueOf())) {
        return `${span.attributes[semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION]} - ${span.attributes[semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION_KIND]}`;
    }
    return undefined;
}
exports.getRequest = getRequest;
function getAction(span, spanType) {
    if (SpanType_1.SpanType.HTTPS.valueOf() === (spanType === null || spanType === void 0 ? void 0 : spanType.valueOf())) {
        const att = span.attributes[semantic_conventions_1.SemanticAttributes.HTTP_METHOD];
        if (att !== undefined) {
            return att.toString();
        }
    }
    else if (SpanType_1.SpanType.DB.valueOf() === (spanType === null || spanType === void 0 ? void 0 : spanType.valueOf())) {
        const att = span.attributes[semantic_conventions_1.SemanticAttributes.DB_OPERATION];
        if (att !== undefined) {
            return att.toString();
        }
    }
    else if (SpanType_1.SpanType.MSG.valueOf() === (spanType === null || spanType === void 0 ? void 0 : spanType.valueOf())) {
        const att = span.attributes[semantic_conventions_1.SemanticAttributes.MESSAGING_OPERATION];
        if (att !== undefined) {
            return att.toString();
        }
    }
    return undefined;
}
exports.getAction = getAction;
function uuidv4ForPassport() {
    const uuid = (0, uuid_1.v4)();
    return uuid.replace(/-/g, "").toUpperCase();
}
exports.uuidv4ForPassport = uuidv4ForPassport;
function getPassportAttributeKey(instrumentation) {
    if (instrumentation !== undefined && httpInstrumentationLibs.filter(e => e === instrumentation.name).length > 0) {
        return constants.ATT_HTTP_PASSPORT;
    }
    return constants.PASSPORT_KEY;
}
exports.getPassportAttributeKey = getPassportAttributeKey;
function getProviderSubaccount() {
    // TODO change this constant back to something like CALM tenant Id
    // since for SaaS scenario might want to map the metrics to a specific tenant which is not the provider (FRUN)
    const providerSubaccountId = getEnvResourceAttributes(constants.CALM_ATT_TENANCY_TENANT_ID);
    if (providerSubaccountId !== undefined) {
        return providerSubaccountId;
    }
    const destination = (0, DestinationService_1.getVcapDestination)();
    if (destination === undefined) {
        return undefined;
    }
    return destination.tenantid;
}
exports.getProviderSubaccount = getProviderSubaccount;
function getCfSpaceName() {
    const application = (0, DestinationService_1.getVcapApplication)();
    if (application === undefined) {
        return undefined;
    }
    return application["space_name"];
}
exports.getCfSpaceName = getCfSpaceName;
function getEnvResourceAttributes(key) {
    const resources = process.env.OTEL_RESOURCE_ATTRIBUTES;
    if (resources === undefined) {
        return undefined;
    }
    const pairs = resources.split(',');
    for (const pair of pairs) {
        const equalsIndex = pair.indexOf('=');
        if (equalsIndex === -1) {
            continue;
        }
        const pairKey = pair.slice(0, equalsIndex);
        const pairValue = pair.slice(equalsIndex + 1);
        if (pairKey === key) {
            return pairValue;
        }
    }
    return undefined;
}
exports.getEnvResourceAttributes = getEnvResourceAttributes;
function normalizeUrl(url) {
    let u = url.startsWith("/") ? url : `/${url}`;
    const urlObj = new URL(`http://dummyhost${u}`);
    const params = urlObj.searchParams;
    if (params.has('$filter')) {
        params.set('$filter', '*');
    }
    return `${urlObj.pathname}${decodeURIComponent(urlObj.search)}`;
}
exports.normalizeUrl = normalizeUrl;
