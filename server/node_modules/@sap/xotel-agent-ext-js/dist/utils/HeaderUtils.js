"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJwtPayload = exports.extractSubdomain = exports.extractUser = exports.extractTenant = exports.DWC_SUBDOMAIN = exports.DWC_USER = exports.DWC_SUBACCOUNT_ID = exports.AUTHORIZATION = void 0;
const logger_1 = require("../common/logger");
exports.AUTHORIZATION = "authorization";
exports.DWC_SUBACCOUNT_ID = "dwc-subaccount-id";
exports.DWC_USER = "dwc-user";
exports.DWC_SUBDOMAIN = "dwc-subdomain";
function extractTenant(carrier, getter, jwtToken) {
    const dwcSub = getter.get(carrier, exports.DWC_SUBACCOUNT_ID);
    logger_1.logger.debug(`HeaderUtils: dwc subaccountId \"${dwcSub}\"`);
    if (dwcSub && typeof dwcSub == "string") {
        return dwcSub;
    }
    if (jwtToken) {
        const subAccountId = !!jwtToken["ext_attr"] && jwtToken["ext_attr"].subaccountid; // SAP XSUAA
        logger_1.logger.debug(`HeaderUtils: ext_attr.subaccountid \"${subAccountId}\"`);
        if (subAccountId) {
            return subAccountId;
        }
        const zid = jwtToken.zid;
        logger_1.logger.debug(`HeaderUtils: zid \"${zid}\"`);
        return zid;
    }
    logger_1.logger.debug("HeaderUtils: Did not find any suitable header for tenant id");
}
exports.extractTenant = extractTenant;
function extractUser(carrier, getter, jwtToken) {
    const dwcUserBase64 = getter.get(carrier, exports.DWC_USER);
    if (dwcUserBase64 && typeof dwcUserBase64 == "string") {
        const dwcUser = parseObj(dwcUserBase64, exports.DWC_USER);
        if (dwcUser) {
            return dwcUser.logonName;
        }
    }
    else if (jwtToken) {
        return jwtToken.user_name;
    }
}
exports.extractUser = extractUser;
function extractSubdomain(carrier, getter, jwtToken) {
    const dwcSubdomain = getter.get(carrier, exports.DWC_SUBDOMAIN);
    if (dwcSubdomain && typeof dwcSubdomain == "string") {
        return dwcSubdomain;
    }
    else if (jwtToken) {
        return jwtToken.zdn;
    }
}
exports.extractSubdomain = extractSubdomain;
function getJwtPayload(carrier, getter) {
    const auth = getter.get(carrier, exports.AUTHORIZATION);
    if (!auth) {
        logger_1.logger.debug("no authorization present");
        return;
    }
    if (typeof auth != "string") {
        logger_1.logger.debug("ignoring unknown authorization header");
        return;
    }
    return parseJwt(auth.substring("Bearer ".length));
}
exports.getJwtPayload = getJwtPayload;
function parseJwt(token) {
    try {
        return JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());
    }
    catch (e) {
        logger_1.logger.error(`Error parsing authentication token ${e}`);
        return null;
    }
}
function parseObj(obj, header) {
    try {
        return JSON.parse(Buffer.from(obj, 'base64').toString());
    }
    catch (e) {
        logger_1.logger.error(`Error parsing json from header ${header}`);
        return null;
    }
}
