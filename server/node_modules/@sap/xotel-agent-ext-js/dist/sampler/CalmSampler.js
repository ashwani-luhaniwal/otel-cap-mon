"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalmSampler = void 0;
const api_1 = require("@opentelemetry/api");
const sdk_trace_base_1 = require("@opentelemetry/sdk-trace-base");
const constants = __importStar(require("../utils/Constants"));
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
class CalmSampler {
    shouldSample(context, traceId, spanName, spanKind, attributes, links) {
        const visibilityLevel = attributes[constants.ATT_VISIBILITY_LEVEL];
        if (visibilityLevel === constants.VisibilityLevel.CONFIDENTIAL || visibilityLevel === constants.VisibilityLevel.INTERNAL) {
            return { decision: sdk_trace_base_1.SamplingDecision.NOT_RECORD };
        }
        if (attributes[semantic_conventions_1.SemanticAttributes.HTTP_TARGET] === '/fesr') {
            return { decision: sdk_trace_base_1.SamplingDecision.NOT_RECORD };
        }
        if (spanKind.valueOf() === api_1.SpanKind.INTERNAL) {
            return { decision: sdk_trace_base_1.SamplingDecision.NOT_RECORD };
        }
        return { decision: sdk_trace_base_1.SamplingDecision.RECORD_AND_SAMPLED };
    }
    toString() {
        return "CalmSampler";
    }
}
exports.CalmSampler = CalmSampler;
