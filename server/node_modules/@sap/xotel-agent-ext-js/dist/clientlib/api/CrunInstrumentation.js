"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigurationByUsecase = exports.sendCrunContent = exports.getServiceType = void 0;
const api_1 = require("@opentelemetry/api");
const logger_1 = require("../../common/logger");
const Constants_1 = require("../../utils/Constants");
const NotificationPoller_1 = require("../../connectivity/NotificationPoller");
const SERVICE_TYPE = process.env.SAP_CALM_SERVICE_TYPE || "";
const getServiceType = () => {
    return SERVICE_TYPE;
};
exports.getServiceType = getServiceType;
const sendCrunContent = (useCaseData, calmServiceType, tenantId) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, _reject) => __awaiter(void 0, void 0, void 0, function* () {
        const traces = api_1.trace.getTracer('crun-instrumentation');
        let jsonPayload = null;
        let useCaseAction = useCaseData.getUseCaseAction();
        let useCaseActionVersion = useCaseData.getUseCaseActionVersion();
        let useCaseName = useCaseData.getUseCase();
        if (NotificationPoller_1.NotificationPoller.isDataCollectionTurnedOn(calmServiceType, tenantId, useCaseName)) {
            logger_1.logger.info(`Data collection turned on for tenant ${tenantId}, creating span`);
            const filterCategories = NotificationPoller_1.NotificationPoller.getFilterCategories(calmServiceType, tenantId, useCaseName);
            useCaseData = useCaseData.filterData(filterCategories);
            // Check if usecaseData is not empty before creating span
            jsonPayload = JSON.stringify(useCaseData);
            const span = traces.startSpan(useCaseData.getUseCase(), {
                kind: api_1.SpanKind.PRODUCER
            });
            span.setAttribute(Constants_1.CALM_ATT_USE_CASE, useCaseData.getUseCase());
            span.setAttribute(Constants_1.CALM_ATT_ACTION, useCaseAction);
            span.setAttribute(Constants_1.CALM_ATT_ACTION_VERSION, useCaseActionVersion);
            span.setAttribute(Constants_1.CALM_ATT_TENANT_ID, tenantId);
            span.setAttribute(Constants_1.CALM_ATT_TENANCY_TENANT_ID, tenantId);
            span.setAttribute(Constants_1.CALM_ATT_SERVICE_TYPE, calmServiceType);
            span.setAttribute(Constants_1.CALM_ATT_ACTION_CONTENT, jsonPayload);
            span.end();
            return resolve({
                'useCaseAction': useCaseAction,
                'jsonPayload': jsonPayload
            });
        }
        else {
            logger_1.logger.info(`Data collection not turned on for tenant ${tenantId}, Ignoring span`);
            return resolve({
                status: 'ignored',
                message: `Data collection not turned on for tenant ${tenantId}, Span Ignored`
            });
        }
    }));
});
exports.sendCrunContent = sendCrunContent;
const getConfigurationByUsecase = (usecase) => {
    let tenantFilterMap = NotificationPoller_1.NotificationPoller.getCachedMaps().tenantFilterMap;
    let tenantLevelConfigs;
    tenantLevelConfigs = tenantFilterMap.get(`${(0, exports.getServiceType)()}-${usecase}`);
    if (tenantLevelConfigs) {
        logger_1.logger.debug(`Fetching configurations for given use case : ${usecase}`);
        return tenantLevelConfigs;
    }
    logger_1.logger.info(`No configurations present for use case : ${usecase}`);
    return new Map();
};
exports.getConfigurationByUsecase = getConfigurationByUsecase;
