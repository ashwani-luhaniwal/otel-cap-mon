"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SapUniversalPropagator = void 0;
const api_1 = require("@opentelemetry/api");
const passport_1 = require("../lib/passport");
const constants = __importStar(require("../utils/Constants"));
const PassportWrapper_1 = require("../model/PassportWrapper");
const core_1 = require("@opentelemetry/core");
const api = __importStar(require("@opentelemetry/api"));
const HeaderUtils_1 = require("../utils/HeaderUtils");
const Utils_1 = require("../utils/Utils");
const logger_1 = require("../common/logger");
const TRACE_PARENT_VERSION = '00';
const providerTenantId = (0, Utils_1.getEnvResourceAttributes)(constants.CALM_ATT_TENANCY_TENANT_ID);
class SapUniversalPropagator {
    inject(context, carrier, setter) {
        let passportContext = context.getValue(api.createContextKey(constants.PASSPORT_KEY));
        let passport = null;
        if (passportContext == null) {
            passport = this.buildPassport(new passport_1.DsrPassport(), null);
        }
        else if (passportContext instanceof PassportWrapper_1.PassportWrapper) {
            passport = passportContext.getOutboundPassport();
        }
        const spanContext = api_1.trace.getSpanContext(context);
        if (passport && spanContext) {
            setter.set(carrier, constants.PASSPORT_HEADER, passport.getPassportAsString());
            setter.set(carrier, constants.CORRELATION_ID_HEADER, this.makeCorrelationId(passport.getTransactionId()));
            const traceParent = `${TRACE_PARENT_VERSION}-${passport.getTransactionId().toLowerCase()}-${spanContext.spanId}-0${Number(api_1.TraceFlags.SAMPLED).toString(16)}`;
            setter.set(carrier, core_1.TRACE_PARENT_HEADER, traceParent);
            if (spanContext.traceState) {
                let sappp = null;
                try {
                    sappp = passport_1.Tools.encodeCorrelators(passport.getConnectionId(), passport.getConnectionCount(), passport.getPreviousComponentId());
                }
                catch (error) {
                    logger_1.logger.debug(`SapUniversalPropagator: could not encode passport correlators for tracestate: ${error}`);
                }
                let traceState = spanContext
                    .traceState
                    .unset(constants.TRACE_STATE_SAPPP);
                if (sappp) {
                    traceState = traceState.set(constants.TRACE_STATE_SAPPP, sappp);
                }
                setter.set(carrier, core_1.TRACE_STATE_HEADER, traceState.serialize());
            }
        }
    }
    extract(context, carrier, getter) {
        const passportHeader = getter.get(carrier, constants.PASSPORT_HEADER);
        const passportHex = Array.isArray(passportHeader)
            ? passportHeader[0]
            : passportHeader;
        const traceParentHeader = getter.get(carrier, core_1.TRACE_PARENT_HEADER);
        const traceParent = Array.isArray(traceParentHeader)
            ? traceParentHeader[0]
            : traceParentHeader;
        let traceParentContext = null;
        if (typeof traceParent === "string") {
            traceParentContext = (0, core_1.parseTraceParent)(traceParent);
        }
        const jwt = (0, HeaderUtils_1.getJwtPayload)(carrier, getter);
        const userId = (0, HeaderUtils_1.extractUser)(carrier, getter, jwt);
        let tenantId = (0, HeaderUtils_1.extractTenant)(carrier, getter, jwt);
        if (tenantId === undefined) {
            logger_1.logger.debug(`will try to resolve tenantId via ${constants.CALM_ATT_TENANCY_TENANT_ID} resource attributes`);
            tenantId = providerTenantId;
        }
        const subdomain = (0, HeaderUtils_1.extractSubdomain)(carrier, getter, jwt);
        logger_1.logger.debug(`SapUniversalPropagator: extracted tenantId \"${tenantId}\"`);
        logger_1.logger.debug(`SapUniversalPropagator: extracted subdomain \"${subdomain}\"`);
        let passport = new passport_1.DsrPassport();
        if (passportHeader === undefined || passportHex === undefined) {
            passport = this.buildPassport(passport, traceParentContext, userId);
        }
        else {
            passport.parsePassport(passportHex);
        }
        let wrapper = new PassportWrapper_1.PassportWrapper(constants.CALM_SERVICE_NAME, {
            passport: passport
        });
        const spanContext = this.getSpanContextFromHeader(passport);
        this.setTraceState(carrier, getter, spanContext);
        const result = api_1.trace.setSpan(context, api_1.trace.wrapSpanContext(spanContext));
        return result
            .setValue(api.createContextKey(constants.PASSPORT_KEY), wrapper)
            .setValue(api.createContextKey(constants.ATT_SUBDOMAIN), subdomain)
            .setValue(api.createContextKey(constants.CALM_ATT_TENANT_ID), tenantId)
            .setValue(api.createContextKey(constants.CALM_ATT_TENANCY_TENANT_ID), tenantId)
            .setValue(api.createContextKey(constants.ATT_USER_ID), userId);
    }
    fields() {
        return [constants.PASSPORT_HEADER];
    }
    getSpanContextFromHeader(passport) {
        let parsedTraceFlags = 0;
        const parsedTraceId = passport.getTransactionId();
        const parsedSpanId = passport.getConnectionId().replace("-", "").substring(16);
        if (passport.getTraceFlag() !== undefined) {
            parsedTraceFlags = 1;
        }
        const resultSpanContext = {
            traceId: parsedTraceId,
            spanId: parsedSpanId,
            traceFlags: parsedTraceFlags,
            isRemote: true,
        };
        return resultSpanContext;
    }
    makeCorrelationId(transactionId) {
        let correlationId = transactionId;
        correlationId = correlationId.slice(0, 8) + "-" + correlationId.slice(8);
        correlationId = correlationId.slice(0, 13) + "-" + correlationId.slice(13);
        correlationId = correlationId.slice(0, 18) + "-" + correlationId.slice(18);
        correlationId = correlationId.slice(0, 23) + "-" + correlationId.slice(23);
        return correlationId.toLowerCase();
    }
    setTraceState(carrier, getter, spanContext) {
        const traceStateHeader = getter.get(carrier, core_1.TRACE_STATE_HEADER);
        if (traceStateHeader) {
            const state = Array.isArray(traceStateHeader)
                ? traceStateHeader.join(',')
                : traceStateHeader;
            spanContext.traceState = new core_1.TraceState(typeof state === 'string' ? state : undefined);
        }
    }
    buildPassport(passport, traceParentContext, userId) {
        if (!traceParentContext) {
            passport.createV3Passport(passport_1.TraceFlags.LOW, // (NONE|LOW|MEDIUM|HIGH) Use LOW for just correlation
            constants.CALM_SERVICE_NAME, // Passport Creator ComponentName
            0, // Service: 0 for "undefined"
            userId !== null && userId !== void 0 ? userId : "<dummy>", // 
            "action", //
            11, // ActionType: 11 denotes HTTP Request
            constants.CALM_SERVICE_NAME, // Previous Component PreviousComponentName
            (0, Utils_1.uuidv4ForPassport)(), // TransactionID 
            "   ", // In case of ABAP system Source Client, else "   "
            passport_1.ComponentTypes.TRACELIB, // Corresponding Component Type (see ComponentTypes)
            (0, Utils_1.uuidv4ForPassport)(), // RootContextId
            (0, Utils_1.uuidv4ForPassport)(), // ConnectionId  
            1);
        }
        else {
            passport.createV3Passport(passport_1.TraceFlags.LOW, // (NONE|LOW|MEDIUM|HIGH) Use LOW for just correlation
            constants.CALM_SERVICE_NAME, // Passport Creator ComponentName
            0, // Service: 0 for "undefined"
            userId !== null && userId !== void 0 ? userId : "<dummy>", // 
            "action", //
            11, // ActionType: 11 denotes HTTP Request
            constants.CALM_SERVICE_NAME, // Previous Component PreviousComponentName
            traceParentContext.traceId, // TransactionID 
            "   ", // In case of ABAP system Source Client, else "   "
            passport_1.ComponentTypes.TRACELIB, // Corresponding Component Type (see ComponentTypes)
            (0, Utils_1.uuidv4ForPassport)(), // RootContextId
            "0000000000000000" + traceParentContext.spanId, // ConnectionId  
            1);
        }
        return passport;
    }
}
exports.SapUniversalPropagator = SapUniversalPropagator;
