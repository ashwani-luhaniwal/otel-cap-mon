import { TraceFlags } from "./TraceFlags";
import { ComponentTypes } from "./ComponentTypes";
import { VarPartType } from "./VarPartType";
import { VarPartItemType } from "./VarPartItemType";
import { VarPartVersion } from "./VarPartVersion";
/**
 * parent object for all elements in passport
 * encapsulate common functionality
 *
 * all values are saved as hex
 * */
export declare abstract class DsrPassportElement {
    protected id: PassportIdentifier;
    protected position: number;
    protected length: number | null;
    protected value: any;
    protected validator: any;
    setPosition(position: number): void;
    getPosition(): number;
    setLength(length: number): void;
    getLength(): number | null;
    getValue(): any;
    getValueAsString(): string;
    getId(): PassportIdentifier;
    setId(id: PassportIdentifier): void;
    protected getElement(offset: number, length: number, varPartAsString: string): string;
    abstract setValue(value: any): void;
    abstract setValueFromDsrPassport(value: string): void;
}
/**
 * none     - [0x00, 0x00]
 * low      - [0x00, 0x00]
 * medium   - [0x89, 0x0A]
 * high     - [0x9F, 0x9D]
 * */
export declare class TraceLevel extends DsrPassportElement {
    setValue(value: TraceFlags): void;
    setValueFromDsrPassport(dsrPassport: string): void;
}
/**
 * used for
 *    - GUID
 *    - transaction id
 *    - root context id
 *    - connection id
 * */
export declare class Guid extends DsrPassportElement {
    setValue(value: string): void;
    setValueFromDsrPassport(dsrPassport: string): void;
    getValue(): any;
}
/**
 * we expected a guid and transfom ever char to hex
 * therefore we transform transid with length 16 to
 * transid with length 32
 * */
export declare class TransactionId extends DsrPassportElement {
    setValue(value: any): void;
    setValueFromDsrPassport(dsrPassport: string): void;
    getValue(): any;
}
/**
 * used for
 *   - version
 *   - len
 *   - client number
 *   - connection counter
 *   - var part counter
 *
 * */
export declare class PassportNumber extends DsrPassportElement {
    setValue(value: number): void;
    setValueFromDsrPassport(dsrPassport: string): void;
}
/**
 * used for
 *   - action
 *   - client
 *   - version
 * */
export declare class PassportString extends DsrPassportElement {
    setValue(value: any): void;
    setValueFromDsrPassport(dsrPassport: string): void;
}
/**
 * used for
 *   - component type
 * */
export declare class ComponentType extends DsrPassportElement {
    setValue(value: ComponentTypes | null): void;
    setValueFromDsrPassport(dsrPassport: string): void;
}
export declare class EyeCatcher extends DsrPassportElement {
    setValue(value: any): void;
    setValueFromDsrPassport(dsrPassport: string): void;
}
export declare class VarPartList extends DsrPassportElement {
    private varPartList;
    constructor();
    setValue(value: any): void;
    addVarPart(varPart: VarPart): void;
    removeVarPart(index: number): void;
    getVarParts(index: number | null): any;
    setValueFromDsrPassport(dsrPassport: string): void;
    /**
     * check if there is another passport available
     * */
    private calculatingRestString;
}
export declare class VarPart extends DsrPassportElement {
    private varPartHeader;
    private varPartItems;
    constructor(varPartVersion: VarPartVersion, varPartType: VarPartType);
    getVarPartVersion(): VarPartVersion | null;
    setVarPartVersion(varPartVersion: VarPartVersion): void;
    getVarPartType(): VarPartType | null;
    setVarPartType(varPartType: VarPartType): void;
    setLastVarPart(lastVarPart: boolean): void;
    isLastVarPart(): boolean;
    getItemCount(): number | null;
    setValue(value: any): void;
    getVarPartHeader(): VarPartHeader;
    getValue(): any;
    setValueFromDsrPassport(dsrPassport: string): void;
    getItem(index: any): VarPartItem;
    getItemList(): VarPartItem[];
    removeItem(index: number): void;
    getVarPartLength(): number | null;
    addItem(itemId: string, itemKey: string, varPartItemType: VarPartItemType, data: any): void;
    private calcLength;
}
/**
 * | Field       | Version | Length  | Last VarPart           | Type                        | Count   |
 * |             |         |         |                        |                             |         |
 * | char length | 2       | 4       | 2                      | 4                           | 4       |
 * | byte length | 1       | 2       | 1                      | 2                           | 2       |
 * | encoding    | hex int | hex int | hex int                | hex int                     | hex int |
 * | comment     | 1       |         | 0 = not last, 1 = last | 1 = System, 2 = Application | Max 255 |
 * **/
export declare class VarPartHeader extends DsrPassportElement {
    private readonly varPartVersionPos;
    private readonly varPartLengthPos;
    private readonly lastVarPartPos;
    private readonly varPartTypePos;
    private readonly itemCountPos;
    private varPartVersion;
    private varPartLength;
    private lastVarPart;
    private varPartType;
    private itemCount;
    constructor(varPartVersion: VarPartVersion | null, varPartType: VarPartType | null, varPartLength: number | null, lastVarPart: boolean | null, itemCount: number | null);
    setValue(value: any): void;
    getVarPartVersion(): VarPartVersion | null;
    setVarPartVersion(varPartVersion: VarPartVersion): void;
    getVarPartType(): VarPartType | null;
    setVarPartType(varPartType: VarPartType): void;
    getVarPartLength(): number | null;
    setVarPartLength(varPartLength: number): void;
    setLastVarPart(lastVarPart: boolean): void;
    getLastVarPart(): boolean;
    setItemCount(itemCount: number): void;
    getItemCount(): number | null;
    setValueFromDsrPassport(varParts: string): void;
    private replaceElement;
    private getItemCountFromHeader;
}
/**
 * Head:
 * | Field       | Id      | Key     | Type                                     | Length  |
 * |             |         |         |                                          |         |
 * | char length | 4       | 4       | 2                                        | 4       |
 * | byte length | 2       | 2       | 1                                        | 2       |
 * | encoding    | Hex int | Hex int | Hex int                                  | Hex int |
 * | comment     |         |         | 1 = Byte,2 = Integer,3 = UUID,4 = String |         |
 *
 *
 * Data:
 * | Type        | Byte          | Integer | UUID | String        |
 * | char length |               | 8       | 32   |               |
 * | byte length | Item.length-7 | 4       | 16   | Item.Length-7 |
 * | encoding    | Hex           | Hex Int | Hex  | Hex UTF-8     |
 *
 * Comment: Length is always the whole length.(including Head)
 *
 * **/
export declare class VarPartItem extends DsrPassportElement {
    private readonly itemIdPos;
    private readonly itemKeyPos;
    private readonly itemTypePos;
    private readonly itemLengthPos;
    private readonly itemHeaderPos;
    private itemId;
    private itemKey;
    private itemType;
    private itemData;
    private itemHeader;
    constructor(itemId: string[], itemKey: string[], length: number, varPartItemType: VarPartItemType | null, data: string[]);
    setValue(value: any): void;
    getItemId(): string;
    getItemKey(): string;
    getItemType(): VarPartItemType | null;
    getItemData(): any;
    getItemHeader(): string;
    setValueFromDsrPassport(varParts: string): void;
    private translateItemType;
    private getLengthOfItem;
}
export declare enum PassportIdentifier {
    EYECATCHER = "EYECATCHER",
    VERSION = "VERSION",
    LENGTH = "LENGTH",
    TRACELEVEL = "TRACELEVEL",
    COMPONENTID = "COMPONENTID",
    COMPONENTTYPE = "COMPONENTTYPE",
    SERVICE = "SERVICE",
    USER = "USER",
    ACTION = "ACTION",
    ACTIONTYPE = "ACTIONTYPE",
    PREVCOMPONENTID = "PREVCOMPONENTID",
    TRANSACTIONID = "TRANSACTIONID",
    GUID = "GUID",
    CLIENT = "CLIENT",
    ROOTCONTEXTID = "ROOTCONTEXTID",
    CONNECTIONID = "CONNECTIONID",
    CONNECTIONCNT = "CONNECTIONCNT",
    VARPARTCOUNT = "VARPARTCOUNT",
    VARPARTOFFSET = "VARPARTOFFSET",
    VARPARTLIST = "VARPARTLIST"
}
