"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MSProcessor = void 0;
const api_1 = require("@opentelemetry/api");
const constants = __importStar(require("../../utils/Constants"));
const core_1 = require("@opentelemetry/core");
const api = __importStar(require("@opentelemetry/api"));
const logger_1 = require("../../common/logger");
const NotificationPoller_1 = require("../../connectivity/NotificationPoller");
const MessageCountersForConsistencyCheck_1 = require("../../config/MessageCountersForConsistencyCheck");
class MSProcessor {
    constructor(exporter) {
        this.shutdownOnce = new core_1.BindOnceFuture(this.doShutdown, this);
        this.spanExporter = exporter;
    }
    forceFlush() {
        return Promise.resolve();
    }
    onStart(span, parentContext) {
        const kind = span.kind;
        let tenantId = parentContext.getValue(api.createContextKey(constants.CALM_ATT_TENANT_ID));
        if (tenantId == null) {
            tenantId = parentContext.getValue(api.createContextKey(constants.CALM_ATT_TENANCY_TENANT_ID));
        }
        const serviceType = process.env.SAP_CALM_SERVICE_TYPE || "";
        if (span.kind.valueOf() == api_1.SpanKind.PRODUCER && (span.name === constants.UseCase.MOCKRECEIVER || span.name === constants.UseCase.MOCKSPANRECEIVER)) {
            if (typeof tenantId !== "string" || !NotificationPoller_1.NotificationPoller.isDataCollectionTurnedOn(serviceType, tenantId, span.name)) {
                logger_1.logger.debug(`MockProcessor onStart: data collection is switched off for ${serviceType}-${tenantId}-${span.name}, don't process span`);
                return;
            }
            logger_1.logger.debug(`MockProcessor onStart: data collection is switched ON for ${serviceType}-${tenantId}-${span.name}, processing span...`);
            this.setAttributes(span, parentContext);
            if (parentContext != undefined)
                api_1.trace.setSpan(parentContext, span);
        }
        else {
            logger_1.logger.debug(`MockProcessor onStart: Ignoring kind: ${kind.valueOf()} span: ${span.name}`);
        }
    }
    onEnd(span) {
        if (this.shutdownOnce.isCalled) {
            return;
        }
        let tenantId = span.attributes[constants.CALM_ATT_TENANT_ID];
        if (tenantId == null) {
            tenantId = span.attributes[constants.CALM_ATT_TENANCY_TENANT_ID];
        }
        const serviceType = process.env.SAP_CALM_SERVICE_TYPE || "";
        const kind = span.kind;
        if (kind.valueOf() === api_1.SpanKind.PRODUCER && (span.name === constants.UseCase.MOCKRECEIVER || span.name === constants.UseCase.MOCKSPANRECEIVER)) {
            if (typeof tenantId !== "string" || !NotificationPoller_1.NotificationPoller.isDataCollectionTurnedOn(serviceType, tenantId, span.name)) {
                logger_1.logger.debug(`MockProcessor onEnd: data collection is switched off for ${serviceType}-${tenantId}-${span.name}, don't process span`);
                return;
            }
            logger_1.logger.debug(`MockProcessor onEnd: data collection is switched ON for ${serviceType}-${tenantId}-${span.name}, processing span...`);
            // Increment value of produced span count just before export() is called.
            (0, MessageCountersForConsistencyCheck_1.incrementProducedMessageCounter)(1, "MS");
            this.doExport([span]);
        }
        else {
            logger_1.logger.debug(`MockProcessor onEnd: Ignoring kind: ${kind.valueOf()} span: ${span.name}`);
        }
    }
    shutdown() {
        return this.shutdownOnce.call();
    }
    doShutdown() {
        return this.spanExporter.shutdown();
    }
    doExport(spans) {
        // prevent downstream exporter calls from generating spans
        api_1.context.with((0, core_1.suppressTracing)(api_1.context.active()), () => {
            this.spanExporter.export(spans, result => {
                var _a;
                if (result.code !== core_1.ExportResultCode.SUCCESS) {
                    (0, core_1.globalErrorHandler)((_a = result.error) !== null && _a !== void 0 ? _a : new Error(`MockProcessor: failed to export. Status: ${result})`));
                }
            });
        });
    }
    setAttributes(span, context) {
        const origin = context.getValue(api.createContextKey(constants.ATT_SUBDOMAIN));
        if (typeof origin == "string") {
            span.setAttribute(constants.ATT_SUBDOMAIN, origin);
            // span.resource.attributes[constants.ATT_SUBDOMAIN] = origin
        }
        const userId = context.getValue(api.createContextKey(constants.ATT_USER_ID));
        if (typeof userId == "string") {
            span.setAttribute(constants.ATT_USER_ID, userId);
            // span.resource.attributes[constants.ATT_USER_ID] = userId
        }
        const tenantId = context.getValue(api.createContextKey(constants.CALM_ATT_TENANT_ID));
        if (typeof tenantId == "string") {
            span.setAttribute(constants.CALM_ATT_TENANT_ID, tenantId);
            // span.resource.attributes[constants.CALM_ATT_TENANT_ID] = tenantId
        }
        const subaccountId = context.getValue(api.createContextKey(constants.CALM_ATT_TENANCY_TENANT_ID));
        if (typeof subaccountId == "string") {
            span.setAttribute(constants.CALM_ATT_TENANCY_TENANT_ID, subaccountId);
        }
        span.setAttribute("Processor", "MSProcessor");
        span.setAttribute(constants.CALM_ATT_SERVICE_TYPE, constants.CALM_SERVICE_TYPE);
        span.setAttribute(constants.CALM_ATT_USE_CASE, span.name);
    }
}
exports.MSProcessor = MSProcessor;
